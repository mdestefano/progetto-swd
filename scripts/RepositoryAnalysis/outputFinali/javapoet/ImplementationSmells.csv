HashCommit, Date, Project Name, Package Name, Type Name, Method Name, Implementation Smell, Cause of the Smell
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
979eb1cb77cd6363db2b7e8e80aed2987bea7e8a,Sun Feb 03 23:30:29 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,modifiersAsSet,Complex Method,Cyclomatic complexity of the method is 10
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,checkInMethod,Complex Conditional,The conditional expression scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW && scope != Scope.INITIALIZER is complex.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod(null`"com.squareup.Foo"`EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
d9098957bf1c50aacb4dcb311a963392bd38515a,Thu Oct 24 02:56:28 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 177.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
620fdd08c8a018290ba3260b7d4e47c06c5c5ead,Fri Feb 22 00:21:20 CET 2013,javapoet,com.squareup.java,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
5659e780ea81ab236a36f3285bdd35d1b61801d0,Sat Feb 02 23:18:31 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,modifiersAsSet,Complex Method,Cyclomatic complexity of the method is 10
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,checkInMethod,Complex Conditional,The conditional expression scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW && scope != Scope.INITIALIZER is complex.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod(null`"com.squareup.Foo"`EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithSingleAttribute,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 124.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
7325befff234704ca2f61090b3173a97cce609fe,Mon Jul 15 23:15:35 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,checkInMethod,Complex Conditional,The conditional expression scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW && scope != Scope.INITIALIZER is complex.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 188.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod(null`"com.squareup.Foo"`Modifier.PUBLIC`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 139.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
ba6054b095dcab3d5f1b3d6cbb923c621f1498a7,Tue Jun 18 05:36:44 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,modifiersAsSet,Complex Method,Cyclomatic complexity of the method is 10
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,checkInMethod,Complex Conditional,The conditional expression scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW && scope != Scope.INITIALIZER is complex.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod(null`"com.squareup.Foo"`EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
1746b5ca6600869ad1275c545368eff0ef2609e9,Fri Aug 23 18:31:46 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
7c4b5564761d7f6fb50fe5ccf02e07553675acc1,Sat Mar 16 03:21:19 CET 2013,javapoet,com.squareup.java,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,modifiersAsSet,Complex Method,Cyclomatic complexity of the method is 10
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,checkInMethod,Complex Conditional,The conditional expression scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW && scope != Scope.INITIALIZER is complex.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod(null`"com.squareup.Foo"`EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithSingleAttribute,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 124.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
84fd31ce9b407dbd1aaea1137dbffbb3065e9b87,Wed Jul 24 08:22:45 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,checkInMethod,Complex Conditional,The conditional expression scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW && scope != Scope.INITIALIZER is complex.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 188.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod(null`"com.squareup.Foo"`Modifier.PUBLIC`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 139.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
269e7e168421210412c1e882fbcdbe65ad3ec5d6,Fri Jun 07 03:19:56 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " BAR`\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 136.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,simpleConstructor,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " if (s == null) throw new NullPointerException();\n"+ " }\n"+ "}\n");" is 166.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationInNestedTypes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " }\n"+ " class Bar {\n"+ " Bar() {\n"+ " }\n"+ " }\n"+ "}\n");" is 159.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginConstructor(EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 123.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImportAsClass,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
9a3c603bde0fbec2b3646fc92c99dbf18c6c6367,Tue Dec 17 07:33:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
016e6beeacb5adcd90582902ddd5beef7a38df1d,Mon Feb 11 18:01:33 CET 2013,javapoet,com.squareup.java,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " BAR`\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 136.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,simpleConstructor,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " if (s == null) throw new NullPointerException();\n"+ " }\n"+ "}\n");" is 166.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationInNestedTypes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " }\n"+ " class Bar {\n"+ " Bar() {\n"+ " }\n"+ " }\n"+ "}\n");" is 159.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginConstructor(EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 123.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImportAsClass,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
ddb0a4312252e327bfb4738a8d835c4111308f43,Mon Nov 25 01:45:28 CET 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,modifiersAsSet,Complex Method,Cyclomatic complexity of the method is 10
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriter,checkInMethod,Complex Conditional,The conditional expression scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW && scope != Scope.INITIALIZER is complex.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod(null`"com.squareup.Foo"`EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
e3779806d57b3d0f5ab168f49967e97f90ea22e1,Thu Sep 26 07:58:34 CEST 2013,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " BAR`\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 136.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithAnnotationAndMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " @ProtoEnum(0)\n"+ " BAR`\n"+ " @ProtoEnum(1)\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 176.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,fieldDeclarationWithWrappingInitialValue,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " String string = \"bar\"\n"+ " + \"baz\"\n"+ " + \"biz\";\n"+ "}\n");" is 137.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,simpleConstructor,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " if (s == null) throw new NullPointerException();\n"+ " }\n"+ "}\n");" is 166.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationInNestedTypes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " }\n"+ " class Bar {\n"+ " Bar() {\n"+ " }\n"+ " }\n"+ "}\n");" is 159.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginConstructor(EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 123.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addImportAsClass,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
5eeae81953555b45b098b53dcda9dedaac3faed1,Sat Jan 11 08:39:35 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriter,isClassInPackage,Magic Number,The method contains a magic number: 2
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 9
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriter,modifiers,Complex Method,Cyclomatic complexity of the method is 10
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`Modifier.ABSTRACT | Modifier.PUBLIC`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 136.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
fee0bc45e6885e614157dfc2f54e871f1079eba6,Wed May 08 22:25:47 CEST 2013,javapoet,com.squareup.java,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 8
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " BAR`\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 136.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithAnnotationAndMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " @ProtoEnum(0)\n"+ " BAR`\n"+ " @ProtoEnum(1)\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 176.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,fieldDeclarationWithWrappingInitialValue,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " String string = \"bar\"\n"+ " + \"baz\"\n"+ " + \"biz\";\n"+ "}\n");" is 137.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,fieldDeclarationWithNewlineInitialValue,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " String string =\n"+ " \"bar\"\n"+ " + \"baz\"\n"+ " + \"biz\";\n"+ "}\n");" is 143.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.noneOf(Modifier.class)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 131.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "interface Foo {\n"+ " String foo(Object object` String s);\n"+ "}\n");" is 121.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 183.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "interface Foo {\n"+ " String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 154.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,simpleConstructor,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " if (s == null) throw new NullPointerException();\n"+ " }\n"+ "}\n");" is 166.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,genericsConstructor,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo<T> {\n"+ " private T fooType;\n"+ " public Foo(T s) {\n"+ " if (s == null) throw new NullPointerException();\n"+ " }\n"+ " public T getFooType() {\n"+ " return fooType;\n"+ " }\n"+ "}\n");" is 249.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationInNestedTypes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " }\n"+ " class Bar {\n"+ " Bar() {\n"+ " }\n"+ " }\n"+ "}\n");" is 159.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginConstructor(EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 123.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addImportAsClass,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x1f
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x7f
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testStringLiteral,Magic Number,The method contains a magic number: 0x9f
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 8
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 9
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 10
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 12
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Magic Number,The method contains a magic number: 13
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testRawType,Long Statement,The length of the statement "assertThat(JavaWriter.rawType(JavaWriter.type(Map.class`"String"`"Integer"))).as("parameterized type").isEqualTo("java.util.Map");" is 130.
ace739ded010ec366f3c2a7a1501d01b7979297d,Fri Apr 18 21:22:27 CEST 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testRawType,Long Statement,The length of the statement "assertThat(JavaWriter.rawType("java.util.Set<com.example.Binding<com.blah.Foo.Blah>>")).as("nested parameterized type").isEqualTo("java.util.Set");" is 147.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,compressType,Complex Method,Cyclomatic complexity of the method is 10
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,compressType,Magic Number,The method contains a magic number: 2
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,beginType,Long Parameter List,The method has 5 parameters. 
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Complex Method,Cyclomatic complexity of the method is 9
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,beginMethod,Long Parameter List,The method has 5 parameters. 
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,emitAnnotation,Missing default,The following switch statement is missing a default case: switch (attributes.size()) {
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriter,hangingIndent,Magic Number,The method contains a magic number: 2
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteral,stringLiteral,Complex Method,Cyclomatic complexity of the method is 10
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteral,stringLiteral,Missing default,The following switch statement is missing a default case: switch (c) {
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " BAR`\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 136.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,enumDeclarationWithAnnotationAndMethod,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "public enum Foo {\n"+ " @ProtoEnum(0)\n"+ " BAR`\n"+ " @ProtoEnum(1)\n"+ " BAZ;\n"+ " public void foo() {\n"+ " }\n"+ "}\n");" is 176.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,fieldDeclarationWithWrappingInitialValue,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " String string = \"bar\"\n"+ " + \"baz\"\n"+ " + \"biz\";\n"+ "}\n");" is 137.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,fieldDeclarationWithNewlineInitialValue,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " String string =\n"+ " \"bar\"\n"+ " + \"baz\"\n"+ " + \"biz\";\n"+ "}\n");" is 143.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 128.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s);\n"+ "}\n");" is 133.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.of(ABSTRACT`PUBLIC)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 180.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,abstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public abstract String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 166.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("int"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 142.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,nonAbstractMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 141.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclaration,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.noneOf(Modifier.class)`"java.lang.Object"`"object"`"java.lang.String"`"s");" is 131.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclaration,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "interface Foo {\n"+ " String foo(Object object` String s);\n"+ "}\n");" is 121.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginMethod("java.lang.String"`"foo"`EnumSet.noneOf(Modifier.class)`Arrays.asList("java.lang.Object"`"object"`"java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 183.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,interfaceMethodDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "interface Foo {\n"+ " String foo(Object object` String s)\n"+ " throws java.io.IOException;\n"+ "}\n");" is 154.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,simpleConstructor,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " if (s == null) throw new NullPointerException();\n"+ " }\n"+ "}\n");" is 166.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,genericsConstructor,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo<T> {\n"+ " private T fooType;\n"+ " public Foo(T s) {\n"+ " if (s == null) throw new NullPointerException();\n"+ " }\n"+ " public T getFooType() {\n"+ " return fooType;\n"+ " }\n"+ "}\n");" is 249.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationInNestedTypes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s) {\n"+ " }\n"+ " class Bar {\n"+ " Bar() {\n"+ " }\n"+ " }\n"+ "}\n");" is 159.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "javaWriter.beginConstructor(EnumSet.of(PUBLIC)`Arrays.asList("java.lang.String"`"s")`Arrays.asList("java.io.IOException"));" is 123.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,constructorDeclarationWithThrows,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " public Foo(String s)\n"+ " throws java.io.IOException {\n"+ " }\n"+ "}\n");" is 144.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 139.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statement,Magic Number,The method contains a magic number: 13
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " // foo\n"+ " int j = s.length() + 13;\n"+ " }\n"+ "}\n");" is 152.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,statementPrecededByComment,Magic Number,The method contains a magic number: 13
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multiLineStatement,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Triangle {\n"+ " double pythagorean(int a` int b) {\n"+ " int cSquared = a * a\n"+ " + b * b;\n"+ " return Math.sqrt(cSquared);\n"+ " }\n"+ "}\n");" is 204.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addImportAsClass,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.ArrayList;\n"+ "public final class Foo {\n"+ " ArrayList list = new java.util.ArrayList();\n"+ "}\n");" is 170.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.getProperty;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 177.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addNestedClassImportAsClass,Long Statement,The length of the statement "javaWriter.emitField("com.squareup.javawriter.JavaWriterTest.NestedClass"`"nestedClass"`EnumSet.noneOf(Modifier.class)`"new NestedClass()");" is 140.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addNestedClassImportAsClass,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import com.squareup.javawriter.JavaWriterTest.NestedClass;\n"+ "public final class Foo {\n"+ " NestedClass nestedClass = new NestedClass();\n"+ "}\n");" is 202.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,addStaticWildcardImport,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import static java.lang.System.*;\n"+ "public final class Foo {\n"+ " String bar = getProperty(\"bar\");\n"+ "}\n");" is 167.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " if (s.isEmpty()) {\n"+ " int j = s.length() + 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 172.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,ifControlFlow,Magic Number,The method contains a magic number: 13
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " do {\n"+ " int j = s.length() + 13;\n"+ " } while (s.isEmpty());\n"+ " }\n"+ "}\n");" is 179.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,doWhileControlFlow,Magic Number,The method contains a magic number: 13
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "class Foo {\n"+ " int foo(String s) {\n"+ " try {\n"+ " int j = s.length() + 13;\n"+ " } catch (RuntimeException e) {\n"+ " e.printStackTrace();\n"+ " } finally {\n"+ " int k = 13;\n"+ " }\n"+ " }\n"+ "}\n");" is 259.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,tryCatchFinallyControlFlow,Magic Number,The method contains a magic number: 13
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import javax.inject.Singleton;\n"+ "@Singleton\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "class Foo {\n"+ "}\n");" is 164.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithTwoNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar)\n"+ "class FooModule {\n"+ "}\n");" is 122.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithThreeNonArrayAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(overrides = true` foo = bar` bar = baz)\n"+ "class FooModule {\n"+ "}\n");" is 133.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,annotatedWithAttributes,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "@Module(\n"+ " overrides = true`\n"+ " entryPoints = {\n"+ " entryPointA`\n"+ " entryPointB`\n"+ " entryPointC\n"+ " }`\n"+ " staticInjections = com.squareup.Quux\n"+ ")\n"+ "class FooModule {\n"+ "}\n");" is 255.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,parameterizedType,Long Statement,The length of the statement "assertCode("" + "package com.squareup;\n" + "\n"+ "import java.util.Date;\n"+ "import java.util.Map;\n"+ "class Foo {\n"+ " Map<String` Date> map;\n"+ "}\n");" is 158.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "javaWriter.emitJavadoc("0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n" + "0123456789 0123456789 0123456789 0123456789");" is 142.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,multilineJavadoc,Long Statement,The length of the statement "assertCode("" + "/**\n" + " * 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\n"+ " * 0123456789 0123456789 0123456789 0123456789\n"+ " */\n");" is 161.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testType,Long Statement,The length of the statement "assertThat(JavaWriter.type(Map.class`JavaWriter.type(String.class)`"?")).as("mixed type and wildcard generic type parameters").isEqualTo("java.util.Map<java.lang.String` ?>");" is 175.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testRawType,Long Statement,The length of the statement "assertThat(JavaWriter.rawType(JavaWriter.type(Map.class`"String"`"Integer"))).as("parameterized type").isEqualTo("java.util.Map");" is 130.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,JavaWriterTest,testRawType,Long Statement,The length of the statement "assertThat(JavaWriter.rawType("java.util.Set<com.example.Binding<com.blah.Foo.Blah>>")).as("nested parameterized type").isEqualTo("java.util.Set");" is 147.
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,stringLiteral,Magic Number,The method contains a magic number: 0x1f
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,stringLiteral,Magic Number,The method contains a magic number: 0x7f
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,stringLiteral,Magic Number,The method contains a magic number: 0x9f
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,checkCharEscape,Magic Number,The method contains a magic number: 8
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,checkCharEscape,Magic Number,The method contains a magic number: 9
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,checkCharEscape,Magic Number,The method contains a magic number: 10
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,checkCharEscape,Magic Number,The method contains a magic number: 12
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,checkCharEscape,Magic Number,The method contains a magic number: 13
ffe1e0d82c97e2be0524dcbb42b12ee4de74df54,Wed Dec 03 23:14:23 CET 2014,javapoet,com.squareup.javawriter,StringLiteralTest,checkCharEscape,Missing default,The following switch statement is missing a default case: switch (codePoint) {
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassName,enclosingClassName,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassName,topLevelClassName,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!part.isEmpty() && Character.isUpperCase(part.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 124.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassName,bestGuess,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Conditional,The conditional expression c == '$' || c == '>' || c == '<' || c == '[' || c == ']' is complex.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 15
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Missing default,The following switch statement is missing a default case: switch (c) {
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Complex Conditional,The conditional expression c == '$' || c == '>' || c == '<' || c == '[' || c == ']' is complex.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 15
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Missing default,The following switch statement is missing a default case: switch (c) {
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 19
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Method,Cyclomatic complexity of the method is 8
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,overriding,Long Statement,The length of the statement "ParameterSpec.Builder parameterBuilder=ParameterSpec.builder(type`name).addModifiers(parameterModifiers.toArray(new Modifier[parameterModifiers.size()]));" is 154.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return new ParameterizedTypeName(ClassName.get((Class<?>)type.getRawType())`TypeName.list(type.getActualTypeArguments()`map));" is 126.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 133 lines of code.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Statement,The length of the statement "extendsTypes=superclass.equals(ClassName.OBJECT) ? Collections.<TypeName>emptyList() : Collections.singletonList(superclass);" is 125.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedNestedParameterizedType,Long Statement,The length of the statement "String expected="java.util.Map.@" + TypeUseAnnotation.class.getCanonicalName() + " Entry<java.lang.Byte` java.lang.Byte>";" is 122.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Testing` 1` 2` 3!").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStream,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("\u00A9 Copyright character gets you everytime").build();" is 152.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "StandardJavaFileManager fileManager=compiler.getStandardFileManager(diagnosticCollector`Locale.getDefault()`StandardCharsets.UTF_8);" is 132.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.<String>emptySet()`Collections.<String>emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 189.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() $T.emptyList() : result"`Collections.class).build();" is 496.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() emptyList() : result;\n"+ " }\n"+ "}\n");" is 669.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "@java.lang.Deprecated\n"+ "protected <T extends java.lang.Runnable & java.io.Closeable> "+ "java.lang.Runnable everything("+ "@com.squareup.javapoet.MethodSpecTest.Nullable java.lang.String arg0` "+ "java.util.List<? extends T> arg1) "+ "throws java.io.IOException` java.lang.SecurityException {\n"+ "}\n");" is 379.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(java.lang.Long arg0) {\n"+ "}\n");" is 127.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder("$N"`thungParameter).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 287.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three` "+ "@Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 296.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things` @QueryMap(encodeValues = false) "+ "Map<String` String> query` @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 470.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 278.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 230.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 247.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry.\n"`Random.class).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 613.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 644.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;) */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 288.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
30455b1a25b3ff348578d882812e4e7c94eb9e9e,Tue Mar 22 00:55:58 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassName,enclosingClassName,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassName,topLevelClassName,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!part.isEmpty() && Character.isUpperCase(part.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 124.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassName,bestGuess,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Conditional,The conditional expression c == '$' || c == '>' || c == '<' || c == '[' || c == ']' is complex.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 15
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Missing default,The following switch statement is missing a default case: switch (c) {
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,add,Complex Conditional,The conditional expression c == '$' || c == '>' || c == '<' || c == '[' || c == ']' is complex.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 15
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,add,Missing default,The following switch statement is missing a default case: switch (c) {
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 19
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Method,Cyclomatic complexity of the method is 8
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpec,overriding,Long Statement,The length of the statement "ParameterSpec.Builder parameterBuilder=ParameterSpec.builder(type`name).addModifiers(parameterModifiers.toArray(new Modifier[parameterModifiers.size()]));" is 154.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ParameterizedTypeName,nestedClass,Long Statement,The length of the statement "return new ParameterizedTypeName(this`rawType.nestedClass(name)`new ArrayList<TypeName>()`new ArrayList<AnnotationSpec>());" is 123.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 133 lines of code.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Statement,The length of the statement "extendsTypes=superclass.equals(ClassName.OBJECT) ? Collections.<TypeName>emptyList() : Collections.singletonList(superclass);" is 125.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedNestedParameterizedType,Long Statement,The length of the statement "String expected="java.util.Map.@" + TypeUseAnnotation.class.getCanonicalName() + " Entry<java.lang.Byte` java.lang.Byte>";" is 122.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Testing` 1` 2` 3!").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStream,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("\u00A9 Copyright character gets you everytime").build();" is 152.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "StandardJavaFileManager fileManager=compiler.getStandardFileManager(diagnosticCollector`Locale.getDefault()`StandardCharsets.UTF_8);" is 132.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.<String>emptySet()`Collections.<String>emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 189.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() $T.emptyList() : result"`Collections.class).build();" is 496.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() emptyList() : result;\n"+ " }\n"+ "}\n");" is 669.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "@java.lang.Deprecated\n"+ "protected <T extends java.lang.Runnable & java.io.Closeable> "+ "java.lang.Runnable everything("+ "@com.squareup.javapoet.MethodSpecTest.Nullable java.lang.String arg0` "+ "java.util.List<? extends T> arg1) "+ "throws java.io.IOException` java.lang.SecurityException {\n"+ "}\n");" is 379.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(java.lang.Long arg0) {\n"+ "}\n");" is 127.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder("$N"`thungParameter).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 287.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three` "+ "@Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 296.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things` @QueryMap(encodeValues = false) "+ "Map<String` String> query` @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 470.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 278.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 230.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 247.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry.\n"`Random.class).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 613.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 644.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;) */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 288.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
79d83b201dea2fcd9eeee414d963b55136727aa6,Wed Apr 27 04:38:37 CEST 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassName,enclosingClassName,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassName,topLevelClassName,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassName,reflectionName,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!part.isEmpty() && Character.isUpperCase(part.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 124.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassName,bestGuess,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 3
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 11
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 3
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 11
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 20
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ParameterizedTypeName,nestedClass,Long Statement,The length of the statement "return new ParameterizedTypeName(this`rawType.nestedClass(name)`new ArrayList<TypeName>()`new ArrayList<AnnotationSpec>());" is 123.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 133 lines of code.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Statement,The length of the statement "extendsTypes=superclass.equals(ClassName.OBJECT) ? Collections.<TypeName>emptyList() : Collections.singletonList(superclass);" is 125.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedNestedParameterizedType,Long Statement,The length of the statement "String expected="java.util.Map.@" + TypeUseAnnotation.class.getCanonicalName() + " Entry<java.lang.Byte` java.lang.Byte>";" is 122.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.<String>emptySet()`Collections.<String>emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 189.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() $T.emptyList() : result"`Collections.class).build();" is 496.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() emptyList() : result;\n"+ " }\n"+ "}\n");" is 669.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(java.lang.String arg0`\n"+ " java.util.List<? extends T> arg1) throws java.io.IOException` "+ "java.lang.SecurityException {\n"+ "}\n");" is 303.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(java.lang.Long arg0) {\n"+ "}\n");" is 127.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder("$N"`thungParameter).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 287.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 278.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtendsSameName,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").superclass(fishTaco).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`javapoetTaco)).addSuperinterface(tacoBellTaco).build();" is 200.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtendsSameName,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends org.fish.taco.Taco "+ "implements Comparable<Taco>` com.taco.bell.Taco {\n"+ "}\n");" is 230.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 230.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 247.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;) */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 288.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
46913cd91914f2b30f3730390c96b8143c260a46,Thu Nov 10 03:43:04 CET 2016,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=(names.get(0).isEmpty() ? Util.join("."`names.subList(1`names.size())) : Util.join("."`names)).replace(".$"`"$");" is 132.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassName,enclosingClassName,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassName,topLevelClassName,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassName,reflectionName,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!part.isEmpty() && Character.isUpperCase(part.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 124.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassName,bestGuess,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 20
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ParameterizedTypeName,nestedClass,Long Statement,The length of the statement "return new ParameterizedTypeName(this`rawType.nestedClass(name)`new ArrayList<TypeName>()`new ArrayList<AnnotationSpec>());" is 123.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 135 lines of code.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Statement,The length of the statement "extendsTypes=superclass.equals(ClassName.OBJECT) ? Collections.<TypeName>emptyList() : Collections.singletonList(superclass);" is 125.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedNestedParameterizedType,Long Statement,The length of the statement "String expected="java.util.Map.@" + TypeUseAnnotation.class.getCanonicalName() + " Entry<java.lang.Byte` java.lang.Byte>";" is 122.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.<String>emptySet()`Collections.<String>emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 189.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(java.lang.String arg0`\n"+ " java.util.List<? extends T> arg1) throws java.io.IOException` "+ "java.lang.SecurityException {\n"+ "}\n");" is 303.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(java.lang.Long arg0) {\n"+ "}\n");" is 127.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 278.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 230.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 247.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;) */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 288.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
dfba6d7272931991e56b0d0ac4b969c17cd3f334,Sat May 13 15:09:14 CEST 2017,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassName,enclosingClassName,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassName,topLevelClassName,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassName,reflectionName,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!part.isEmpty() && Character.isUpperCase(part.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 124.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassName,bestGuess,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 21
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ParameterizedTypeName,nestedClass,Long Statement,The length of the statement "return new ParameterizedTypeName(this`rawType.nestedClass(name)`new ArrayList<TypeName>()`new ArrayList<AnnotationSpec>());" is 123.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 135 lines of code.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Statement,The length of the statement "extendsTypes=superclass.equals(ClassName.OBJECT) ? Collections.<TypeName>emptyList() : Collections.singletonList(superclass);" is 125.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedNestedParameterizedType,Long Statement,The length of the statement "String expected="java.util.Map.@" + TypeUseAnnotation.class.getCanonicalName() + " Entry<java.lang.Byte` java.lang.Byte>";" is 122.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.<String>emptySet()`Collections.<String>emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 189.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.<String>of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.<JavaFileObject>of());" is 208.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 230.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.valueOf("DEFAULT")).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 247.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;) */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 288.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
a2f21df8124e71c5ee55614919b86bb1e3879a55,Sat Jan 27 05:32:23 CET 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassName,get,Missing default,The following switch statement is missing a default case: switch (element.getNestingKind()) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 20
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 135 lines of code.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.emptySet()`Collections.emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 173.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;) */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 288.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
b09d944edd6029434aac2e14cff14df0f4bb521e,Sun Apr 29 23:10:21 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 20
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 135 lines of code.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,addMethod,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,addType,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,errorTypes,Long Statement,The length of the statement "JavaFileObject hasErrorTypes=JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes"`"package com.squareup.tacos;"`""`"@SuppressWarnings(\"hook-into-compiler\")"`"class ErrorTypes {"`" Tacos tacos;"`" Ingredients.Guacamole guacamole;"`"}");" is 247.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.emptySet()`Collections.emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 173.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;) */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 288.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
a5db06d05f8bd799cef194af28ace07427e2d07e,Wed May 16 17:19:28 CEST 2018,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Long Parameter List,The method has 5 parameters. 
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 21
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFile,writeToPath,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Conditional,The conditional expression skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName) is complex.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Long Statement,The length of the statement "if (skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName)) {" is 122.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ParameterSpec,get,Long Statement,The length of the statement "List<AnnotationSpec> annotations=element.getAnnotationMirrors().stream().map((mirror) -> AnnotationSpec.get(mirror)).collect(Collectors.toList());" is 146.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 136 lines of code.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Complex Method,Cyclomatic complexity of the method is 17
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Complex Method,Cyclomatic complexity of the method is 17
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,errorTypes,Long Statement,The length of the statement "JavaFileObject hasErrorTypes=JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes"`"package com.squareup.tacos;"`""`"@SuppressWarnings(\"hook-into-compiler\")"`"class ErrorTypes {"`" Tacos tacos;"`" Ingredients.Guacamole guacamole;"`"}");" is 247.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FieldSpecTest,modifyAnnotations,Long Statement,The length of the statement "FieldSpec.Builder builder=FieldSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 129.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.emptySet()`Collections.emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 173.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "JavaFile.Builder builder=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addStaticImport(File.class`"separator");" is 142.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.io.File.separatorChar;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 152.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).build().toString();" is 166.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).skipJavaLangImports(true).build().toString();" is 192.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(Foo.class).build()).build().toString();" is 367.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(getElement(Foo.class)).build()).build().toString();" is 379.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").addType(TypeSpec.classBuilder("NestedTypeA").build()).addType(TypeSpec.classBuilder("NestedTypeB").build()).addSuperinterface(FooInterface.class).build()).build().toString();" is 472.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.tacos;\n" + "\n" + "import com.squareup.javapoet.JavaFileTest;\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco implements JavaFileTest.FooInterface {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "\n"+ " class NestedTypeA {\n"+ " }\n"+ "\n"+ " class NestedTypeB {\n"+ " }\n"+ "}\n");" is 446.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,childTypeBuilder,Long Statement,The length of the statement "return TypeSpec.classBuilder("Child").addMethod(MethodSpec.methodBuilder("optionalString").returns(ParameterizedTypeName.get(Optional.class`String.class)).addStatement("return $T.empty()"`Optional.class).build()).addMethod(MethodSpec.methodBuilder("pattern").returns(Pattern.class).addStatement("return null").build());" is 319.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(Parent.class).build()).build().toString();" is 127.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(getElement(Parent.class).asType()).build()).build().toString();" is 148.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(ParentInterface.class).build()).build().toString();" is 143.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(getElement(ParentInterface.class).asType()).build()).build().toString();" is 164.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`TypeSpec.classBuilder("MapType").addMethod(MethodSpec.methodBuilder("optionalString").returns(ClassName.get("com.foo"`"Entry")).addStatement("return null").build()).addSuperinterface(Map.class).build()).build().toString();" is 277.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.util.Map;\n"+ "\n"+ "class MapType implements Map {\n"+ " com.foo.Entry optionalString() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 215.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " @com.squareup.javapoet.MethodSpecTest.Nullable java.lang.String arg0`\n"+ " java.util.List<? extends T> arg1) throws java.io.IOException` java.lang.SecurityException {\n"+ "}\n");" is 353.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addModifiers(Modifier.PRIVATE).addParameter(TypeName.DOUBLE`"money").addJavadoc("Gets the best Taco\n").build();" is 170.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco\n"+ " */\n"+ "private void getTaco(double money) {\n"+ "}\n");" is 144.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).addJavadoc("Gets the best Taco money can buy.\n").build();" is 348.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco money can buy.\n"+ " *\n"+ " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 277.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).build();" is 298.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 227.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyAnnotations,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 127.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyTypeVariables,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addTypeVariable(t).addTypeVariable(TypeVariableName.get("V"));" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow(named("if ($field:N > $threshold:L)"`m)).nextControlFlow(named("else if ($field:N == $threshold:L)"`m)).endControlFlow().build();" is 203.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " if (valueField > 5) {\n"+ " } else if (valueField == 5) {\n"+ " }\n"+ "}\n");" is 150.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow("do").addStatement(named("$field:N--"`m)).endControlFlow(named("while ($field:N > $threshold:L)"`m)).build();" is 183.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " do {\n"+ " valueField--;\n"+ " } while (valueField > 5);\n"+ "}\n");" is 141.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,characterMappingInvalidStartButValidPart,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ParameterSpecTest,parameterVariableElement,Long Statement,The length of the statement "assertThat(ParameterSpec.get(parameterElement).toString()).isEqualTo("@javax.annotation.Nullable java.lang.String arg0");" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,ParameterSpecTest,modifyAnnotations,Long Statement,The length of the statement "ParameterSpec.Builder builder=ParameterSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 137.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "TypeSpec gen=TypeSpec.classBuilder("Gen").addTypeVariable(TypeVariableName.get("InPackage")).addTypeVariable(TypeVariableName.get("OtherType")).addField(FieldSpec.builder(inPackage`"inPackage").build()).addField(FieldSpec.builder(otherType`"otherType").build()).addMethod(MethodSpec.methodBuilder("withTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("withoutTypeVariables").addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("againWithTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("masksEnclosingTypeVariable").addTypeVariable(TypeVariableName.get("InPackage")).build()).addMethod(MethodSpec.methodBuilder("hasSimpleNameThatWasPreviouslyMasked").addStatement("$T inPackage = null"`inPackage).build()).build();" is 1268.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.other.MethodOtherType;\n"+ "\n"+ "class Gen<InPackage` OtherType> {\n"+ " com.squareup.tacos.InPackage inPackage;\n"+ "\n"+ " com.other.OtherType otherType;\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void withTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " void withoutTypeVariables() {\n"+ " MethodInPackage inPackage = null;\n"+ " MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void againWithTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <InPackage> void masksEnclosingTypeVariable() {\n"+ " }\n"+ "\n"+ " void hasSimpleNameThatWasPreviouslyMasked() {\n"+ " com.squareup.tacos.InPackage inPackage = null;\n"+ " }\n"+ "}\n");" is 965.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;)\n"+ " */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 294.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).addOriginatingElement(originatingElement).alwaysQualify("com.example.AlwaysQualified").build();" is 631.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyAnnotations,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.classBuilder("Taco").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 123.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyEnumConstants,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.enumBuilder("Taco").addEnumConstant("BELL"`constantType).addEnumConstant("WUT"`TypeSpec.anonymousClassBuilder("").build());" is 157.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocWithTrailingLineDoesNotAddAnother,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
8b5db1a19db6366841a9ce31d526482c8b35e745,Thu Jan 09 17:27:58 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocEnsuresTrailingLine,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Long Parameter List,The method has 5 parameters. 
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 21
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFile,writeToPath,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Conditional,The conditional expression skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName) is complex.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Long Statement,The length of the statement "if (skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName)) {" is 122.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ParameterSpec,get,Long Statement,The length of the statement "List<AnnotationSpec> annotations=element.getAnnotationMirrors().stream().map((mirror) -> AnnotationSpec.get(mirror)).collect(Collectors.toList());" is 146.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 136 lines of code.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Complex Method,Cyclomatic complexity of the method is 17
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Complex Method,Cyclomatic complexity of the method is 17
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,errorTypes,Long Statement,The length of the statement "JavaFileObject hasErrorTypes=JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes"`"package com.squareup.tacos;"`""`"@SuppressWarnings(\"hook-into-compiler\")"`"class ErrorTypes {"`" Tacos tacos;"`" Ingredients.Guacamole guacamole;"`"}");" is 247.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FieldSpecTest,modifyAnnotations,Long Statement,The length of the statement "FieldSpec.Builder builder=FieldSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 129.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.emptySet()`Collections.emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 173.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "JavaFile.Builder builder=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addStaticImport(File.class`"separator");" is 142.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.io.File.separatorChar;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 152.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).build().toString();" is 166.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).skipJavaLangImports(true).build().toString();" is 192.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(Foo.class).build()).build().toString();" is 367.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(getElement(Foo.class)).build()).build().toString();" is 379.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").addType(TypeSpec.classBuilder("NestedTypeA").build()).addType(TypeSpec.classBuilder("NestedTypeB").build()).addSuperinterface(FooInterface.class).build()).build().toString();" is 472.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.tacos;\n" + "\n" + "import com.squareup.javapoet.JavaFileTest;\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco implements JavaFileTest.FooInterface {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "\n"+ " class NestedTypeA {\n"+ " }\n"+ "\n"+ " class NestedTypeB {\n"+ " }\n"+ "}\n");" is 446.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,childTypeBuilder,Long Statement,The length of the statement "return TypeSpec.classBuilder("Child").addMethod(MethodSpec.methodBuilder("optionalString").returns(ParameterizedTypeName.get(Optional.class`String.class)).addStatement("return $T.empty()"`Optional.class).build()).addMethod(MethodSpec.methodBuilder("pattern").returns(Pattern.class).addStatement("return null").build());" is 319.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(Parent.class).build()).build().toString();" is 127.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(getElement(Parent.class).asType()).build()).build().toString();" is 148.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(ParentInterface.class).build()).build().toString();" is 143.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(getElement(ParentInterface.class).asType()).build()).build().toString();" is 164.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`TypeSpec.classBuilder("MapType").addMethod(MethodSpec.methodBuilder("optionalString").returns(ClassName.get("com.foo"`"Entry")).addStatement("return null").build()).addSuperinterface(Map.class).build()).build().toString();" is 277.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.util.Map;\n"+ "\n"+ "class MapType implements Map {\n"+ " com.foo.Entry optionalString() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 215.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addModifiers(Modifier.PRIVATE).addParameter(TypeName.DOUBLE`"money").addJavadoc("Gets the best Taco\n").build();" is 170.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco\n"+ " */\n"+ "private void getTaco(double money) {\n"+ "}\n");" is 144.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).addJavadoc("Gets the best Taco money can buy.\n").build();" is 348.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco money can buy.\n"+ " *\n"+ " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 277.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).build();" is 298.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 227.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyAnnotations,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 127.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyTypeVariables,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addTypeVariable(t).addTypeVariable(TypeVariableName.get("V"));" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow(named("if ($field:N > $threshold:L)"`m)).nextControlFlow(named("else if ($field:N == $threshold:L)"`m)).endControlFlow().build();" is 203.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " if (valueField > 5) {\n"+ " } else if (valueField == 5) {\n"+ " }\n"+ "}\n");" is 150.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow("do").addStatement(named("$field:N--"`m)).endControlFlow(named("while ($field:N > $threshold:L)"`m)).build();" is 183.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " do {\n"+ " valueField--;\n"+ " } while (valueField > 5);\n"+ "}\n");" is 141.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,characterMappingInvalidStartButValidPart,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ParameterSpecTest,parameterVariableElement,Long Statement,The length of the statement "assertThat(ParameterSpec.get(parameterElement).toString()).isEqualTo("@javax.annotation.Nullable java.lang.String arg0");" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,ParameterSpecTest,modifyAnnotations,Long Statement,The length of the statement "ParameterSpec.Builder builder=ParameterSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 137.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "TypeSpec gen=TypeSpec.classBuilder("Gen").addTypeVariable(TypeVariableName.get("InPackage")).addTypeVariable(TypeVariableName.get("OtherType")).addField(FieldSpec.builder(inPackage`"inPackage").build()).addField(FieldSpec.builder(otherType`"otherType").build()).addMethod(MethodSpec.methodBuilder("withTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("withoutTypeVariables").addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("againWithTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("masksEnclosingTypeVariable").addTypeVariable(TypeVariableName.get("InPackage")).build()).addMethod(MethodSpec.methodBuilder("hasSimpleNameThatWasPreviouslyMasked").addStatement("$T inPackage = null"`inPackage).build()).build();" is 1268.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.other.MethodOtherType;\n"+ "\n"+ "class Gen<InPackage` OtherType> {\n"+ " com.squareup.tacos.InPackage inPackage;\n"+ "\n"+ " com.other.OtherType otherType;\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void withTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " void withoutTypeVariables() {\n"+ " MethodInPackage inPackage = null;\n"+ " MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void againWithTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <InPackage> void masksEnclosingTypeVariable() {\n"+ " }\n"+ "\n"+ " void hasSimpleNameThatWasPreviouslyMasked() {\n"+ " com.squareup.tacos.InPackage inPackage = null;\n"+ " }\n"+ "}\n");" is 965.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;)\n"+ " */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 294.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).addOriginatingElement(originatingElement).alwaysQualify("com.example.AlwaysQualified").build();" is 631.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyAnnotations,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.classBuilder("Taco").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 123.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyEnumConstants,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.enumBuilder("Taco").addEnumConstant("BELL"`constantType).addEnumConstant("WUT"`TypeSpec.anonymousClassBuilder("").build());" is 157.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocWithTrailingLineDoesNotAddAnother,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
9451a362adee16bbf7be382c2a95772fae2c48d1,Mon Jan 20 15:53:47 CET 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocEnsuresTrailingLine,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Long Parameter List,The method has 5 parameters. 
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 21
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeToPath,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Conditional,The conditional expression skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName) is complex.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Long Statement,The length of the statement "if (skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName)) {" is 122.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 136 lines of code.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Complex Method,Cyclomatic complexity of the method is 17
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Complex Method,Cyclomatic complexity of the method is 17
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,errorTypes,Long Statement,The length of the statement "JavaFileObject hasErrorTypes=JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes"`"package com.squareup.tacos;"`""`"@SuppressWarnings(\"hook-into-compiler\")"`"class ErrorTypes {"`" Tacos tacos;"`" Ingredients.Guacamole guacamole;"`"}");" is 247.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FieldSpecTest,modifyAnnotations,Long Statement,The length of the statement "FieldSpec.Builder builder=FieldSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 129.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.emptySet()`Collections.emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 173.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "JavaFile.Builder builder=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addStaticImport(File.class`"separator");" is 142.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.io.File.separatorChar;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 152.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).build().toString();" is 166.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).skipJavaLangImports(true).build().toString();" is 192.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(Foo.class).build()).build().toString();" is 367.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(getElement(Foo.class)).build()).build().toString();" is 379.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").addType(TypeSpec.classBuilder("NestedTypeA").build()).addType(TypeSpec.classBuilder("NestedTypeB").build()).addSuperinterface(FooInterface.class).build()).build().toString();" is 472.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.tacos;\n" + "\n" + "import com.squareup.javapoet.JavaFileTest;\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco implements JavaFileTest.FooInterface {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "\n"+ " class NestedTypeA {\n"+ " }\n"+ "\n"+ " class NestedTypeB {\n"+ " }\n"+ "}\n");" is 446.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,childTypeBuilder,Long Statement,The length of the statement "return TypeSpec.classBuilder("Child").addMethod(MethodSpec.methodBuilder("optionalString").returns(ParameterizedTypeName.get(Optional.class`String.class)).addStatement("return $T.empty()"`Optional.class).build()).addMethod(MethodSpec.methodBuilder("pattern").returns(Pattern.class).addStatement("return null").build());" is 319.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(Parent.class).build()).build().toString();" is 127.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(getElement(Parent.class).asType()).build()).build().toString();" is 148.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(ParentInterface.class).build()).build().toString();" is 143.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(getElement(ParentInterface.class).asType()).build()).build().toString();" is 164.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`TypeSpec.classBuilder("MapType").addMethod(MethodSpec.methodBuilder("optionalString").returns(ClassName.get("com.foo"`"Entry")).addStatement("return null").build()).addSuperinterface(Map.class).build()).build().toString();" is 277.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.util.Map;\n"+ "\n"+ "class MapType implements Map {\n"+ " com.foo.Entry optionalString() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 215.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyParameterAnnotations,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder(implClassName).superclass(abstractTypeElement.asType()).addMethod(MethodSpec.overriding(fooElement).build()).build();" is 153.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addModifiers(Modifier.PRIVATE).addParameter(TypeName.DOUBLE`"money").addJavadoc("Gets the best Taco\n").build();" is 170.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco\n"+ " */\n"+ "private void getTaco(double money) {\n"+ "}\n");" is 144.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).addJavadoc("Gets the best Taco money can buy.\n").build();" is 348.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco money can buy.\n"+ " *\n"+ " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 277.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).build();" is 298.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 227.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyAnnotations,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 127.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyTypeVariables,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addTypeVariable(t).addTypeVariable(TypeVariableName.get("V"));" is 121.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow(named("if ($field:N > $threshold:L)"`m)).nextControlFlow(named("else if ($field:N == $threshold:L)"`m)).endControlFlow().build();" is 203.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " if (valueField > 5) {\n"+ " } else if (valueField == 5) {\n"+ " }\n"+ "}\n");" is 150.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow("do").addStatement(named("$field:N--"`m)).endControlFlow(named("while ($field:N > $threshold:L)"`m)).build();" is 183.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " do {\n"+ " valueField--;\n"+ " } while (valueField > 5);\n"+ "}\n");" is 141.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,characterMappingInvalidStartButValidPart,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,ParameterSpecTest,modifyAnnotations,Long Statement,The length of the statement "ParameterSpec.Builder builder=ParameterSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 137.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "TypeSpec gen=TypeSpec.classBuilder("Gen").addTypeVariable(TypeVariableName.get("InPackage")).addTypeVariable(TypeVariableName.get("OtherType")).addField(FieldSpec.builder(inPackage`"inPackage").build()).addField(FieldSpec.builder(otherType`"otherType").build()).addMethod(MethodSpec.methodBuilder("withTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("withoutTypeVariables").addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("againWithTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("masksEnclosingTypeVariable").addTypeVariable(TypeVariableName.get("InPackage")).build()).addMethod(MethodSpec.methodBuilder("hasSimpleNameThatWasPreviouslyMasked").addStatement("$T inPackage = null"`inPackage).build()).build();" is 1268.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.other.MethodOtherType;\n"+ "\n"+ "class Gen<InPackage` OtherType> {\n"+ " com.squareup.tacos.InPackage inPackage;\n"+ "\n"+ " com.other.OtherType otherType;\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void withTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " void withoutTypeVariables() {\n"+ " MethodInPackage inPackage = null;\n"+ " MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void againWithTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <InPackage> void masksEnclosingTypeVariable() {\n"+ " }\n"+ "\n"+ " void hasSimpleNameThatWasPreviouslyMasked() {\n"+ " com.squareup.tacos.InPackage inPackage = null;\n"+ " }\n"+ "}\n");" is 965.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;)\n"+ " */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 294.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).addOriginatingElement(originatingElement).alwaysQualify("com.example.AlwaysQualified").build();" is 631.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyAnnotations,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.classBuilder("Taco").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 123.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyEnumConstants,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.enumBuilder("Taco").addEnumConstant("BELL"`constantType).addEnumConstant("WUT"`TypeSpec.anonymousClassBuilder("").build());" is 157.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocWithTrailingLineDoesNotAddAnother,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
714e05ca60179285746604452324262b126dcb2d,Thu Jun 18 17:11:11 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocEnsuresTrailingLine,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Long Parameter List,The method has 5 parameters. 
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 21
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeToPath,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Conditional,The conditional expression skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName) is complex.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Long Statement,The length of the statement "if (skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName)) {" is 122.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 136 lines of code.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Complex Method,Cyclomatic complexity of the method is 17
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Complex Method,Cyclomatic complexity of the method is 17
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,errorTypes,Long Statement,The length of the statement "JavaFileObject hasErrorTypes=JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes"`"package com.squareup.tacos;"`""`"@SuppressWarnings(\"hook-into-compiler\")"`"class ErrorTypes {"`" Tacos tacos;"`" Ingredients.Guacamole guacamole;"`"}");" is 247.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FieldSpecTest,modifyAnnotations,Long Statement,The length of the statement "FieldSpec.Builder builder=FieldSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 129.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.emptySet()`Collections.emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 173.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "JavaFile.Builder builder=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addStaticImport(File.class`"separator");" is 142.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.io.File.separatorChar;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 152.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).build().toString();" is 166.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).skipJavaLangImports(true).build().toString();" is 192.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(Foo.class).build()).build().toString();" is 367.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(getElement(Foo.class)).build()).build().toString();" is 379.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").addType(TypeSpec.classBuilder("NestedTypeA").build()).addType(TypeSpec.classBuilder("NestedTypeB").build()).addSuperinterface(FooInterface.class).build()).build().toString();" is 472.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.tacos;\n" + "\n" + "import com.squareup.javapoet.JavaFileTest;\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco implements JavaFileTest.FooInterface {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "\n"+ " class NestedTypeA {\n"+ " }\n"+ "\n"+ " class NestedTypeB {\n"+ " }\n"+ "}\n");" is 446.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,childTypeBuilder,Long Statement,The length of the statement "return TypeSpec.classBuilder("Child").addMethod(MethodSpec.methodBuilder("optionalString").returns(ParameterizedTypeName.get(Optional.class`String.class)).addStatement("return $T.empty()"`Optional.class).build()).addMethod(MethodSpec.methodBuilder("pattern").returns(Pattern.class).addStatement("return null").build());" is 319.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(Parent.class).build()).build().toString();" is 127.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(getElement(Parent.class).asType()).build()).build().toString();" is 148.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(ParentInterface.class).build()).build().toString();" is 143.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(getElement(ParentInterface.class).asType()).build()).build().toString();" is 164.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`TypeSpec.classBuilder("MapType").addMethod(MethodSpec.methodBuilder("optionalString").returns(ClassName.get("com.foo"`"Entry")).addStatement("return null").build()).addSuperinterface(Map.class).build()).build().toString();" is 277.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.util.Map;\n"+ "\n"+ "class MapType implements Map {\n"+ " com.foo.Entry optionalString() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 215.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyParameterAnnotations,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder(implClassName).superclass(abstractTypeElement.asType()).addMethod(MethodSpec.overriding(fooElement).build()).build();" is 153.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addModifiers(Modifier.PRIVATE).addParameter(TypeName.DOUBLE`"money").addJavadoc("Gets the best Taco\n").build();" is 170.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco\n"+ " */\n"+ "private void getTaco(double money) {\n"+ "}\n");" is 144.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).addJavadoc("Gets the best Taco money can buy.\n").build();" is 348.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco money can buy.\n"+ " *\n"+ " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 277.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).build();" is 298.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 227.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyAnnotations,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 127.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyTypeVariables,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addTypeVariable(t).addTypeVariable(TypeVariableName.get("V"));" is 121.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow(named("if ($field:N > $threshold:L)"`m)).nextControlFlow(named("else if ($field:N == $threshold:L)"`m)).endControlFlow().build();" is 203.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " if (valueField > 5) {\n"+ " } else if (valueField == 5) {\n"+ " }\n"+ "}\n");" is 150.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow("do").addStatement(named("$field:N--"`m)).endControlFlow(named("while ($field:N > $threshold:L)"`m)).build();" is 183.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " do {\n"+ " valueField--;\n"+ " } while (valueField > 5);\n"+ "}\n");" is 141.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,characterMappingInvalidStartButValidPart,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,ParameterSpecTest,modifyAnnotations,Long Statement,The length of the statement "ParameterSpec.Builder builder=ParameterSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 137.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "TypeSpec gen=TypeSpec.classBuilder("Gen").addTypeVariable(TypeVariableName.get("InPackage")).addTypeVariable(TypeVariableName.get("OtherType")).addField(FieldSpec.builder(inPackage`"inPackage").build()).addField(FieldSpec.builder(otherType`"otherType").build()).addMethod(MethodSpec.methodBuilder("withTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("withoutTypeVariables").addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("againWithTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("masksEnclosingTypeVariable").addTypeVariable(TypeVariableName.get("InPackage")).build()).addMethod(MethodSpec.methodBuilder("hasSimpleNameThatWasPreviouslyMasked").addStatement("$T inPackage = null"`inPackage).build()).build();" is 1268.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.other.MethodOtherType;\n"+ "\n"+ "class Gen<InPackage` OtherType> {\n"+ " com.squareup.tacos.InPackage inPackage;\n"+ "\n"+ " com.other.OtherType otherType;\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void withTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " void withoutTypeVariables() {\n"+ " MethodInPackage inPackage = null;\n"+ " MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void againWithTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <InPackage> void masksEnclosingTypeVariable() {\n"+ " }\n"+ "\n"+ " void hasSimpleNameThatWasPreviouslyMasked() {\n"+ " com.squareup.tacos.InPackage inPackage = null;\n"+ " }\n"+ "}\n");" is 965.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;)\n"+ " */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 294.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).addOriginatingElement(originatingElement).alwaysQualify("com.example.AlwaysQualified").build();" is 631.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyAnnotations,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.classBuilder("Taco").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 123.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyEnumConstants,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.enumBuilder("Taco").addEnumConstant("BELL"`constantType).addEnumConstant("WUT"`TypeSpec.anonymousClassBuilder("").build());" is 157.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocWithTrailingLineDoesNotAddAnother,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
5ca6d5b206bccb53305ad6235df45a173e983297,Thu Jun 18 17:43:13 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocEnsuresTrailingLine,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emit,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotationSpec,emitAnnotationValues,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassName,ClassName,Long Statement,The length of the statement "this.canonicalName=enclosingClassName != null ? (enclosingClassName.canonicalName + '.' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 174.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassName,reflectionName,Long Statement,The length of the statement "return enclosingClassName != null ? (enclosingClassName.reflectionName() + '$' + simpleName) : (packageName.isEmpty() ? simpleName : packageName + '.' + simpleName);" is 165.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassName,bestGuess,Long Statement,The length of the statement "checkArgument(!simpleName.isEmpty() && Character.isUpperCase(simpleName.codePointAt(0))`"couldn't make a guess for %s"`classNameString);" is 136.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,joining,Long Statement,The length of the statement "return Collector.of(() -> new CodeBlockJoiner(separator`builder())`CodeBlockJoiner::add`CodeBlockJoiner::merge`CodeBlockJoiner::join);" is 134.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addNamed,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Complex Method,Cyclomatic complexity of the method is 12
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlock,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Long Statement,The length of the statement "checkArgument(isNoArgPlaceholder(format.charAt(p + 1))`"unknown format $%s at %s in '%s'"`format.charAt(p + 1)`p + 1`format);" is 125.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,addNamed,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Complex Method,Cyclomatic complexity of the method is 12
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(index >= 0 && index < args.length`"index %d for '%s' not in range (received %s arguments)"`index + 1`format.substring(indexStart - 1`indexEnd + 1)`args.length);" is 174.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,add,Long Statement,The length of the statement "checkArgument(relativeParameterCount >= args.length`"unused arguments: expected %s` received %s"`relativeParameterCount`args.length);" is 133.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,addArgument,Missing default,The following switch statement is missing a default case: switch (c) {
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Long Parameter List,The method has 5 parameters. 
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,CodeWriter,Magic Number,The method contains a magic number: 100
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Complex Method,Cyclomatic complexity of the method is 21
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emit,Missing default,The following switch statement is missing a default case: switch (part) {
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitWrappingSpace,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Conditional,The conditional expression (javadoc || comment) && trailingNewline is complex.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Complex Method,Cyclomatic complexity of the method is 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeWriter,emitAndIndent,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeToPath,Long Statement,The length of the statement "checkArgument(Files.notExists(directory) || Files.isDirectory(directory)`"path %s exists but is not a directory."`directory);" is 125.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,writeTo,Long Statement,The length of the statement "JavaFileObject filerSourceFile=filer.createSourceFile(fileName`originatingElements.toArray(new Element[originatingElements.size()]));" is 133.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Conditional,The conditional expression skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName) is complex.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Complex Method,Cyclomatic complexity of the method is 8
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,emit,Long Statement,The length of the statement "if (skipJavaLangImports && className.packageName().equals("java.lang") && !alwaysQualify.contains(className.simpleName)) {" is 122.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFile,toJavaFileObject,Long Statement,The length of the statement "URI uri=URI.create((packageName.isEmpty() ? typeSpec.name : packageName.replace('.'`'/') + '/' + typeSpec.name) + Kind.SOURCE.extension);" is 137.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapper,flush,Missing default,The following switch statement is missing a default case: switch (flushType) {
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(code.isEmpty() || !builder.modifiers.contains(Modifier.ABSTRACT)`"abstract method %s cannot have code"`builder.name);" is 131.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,MethodSpec,Long Statement,The length of the statement "checkArgument(!builder.varargs || lastParameterIsArray(builder.parameters)`"last parameter of varargs method %s must be an array"`builder.name);" is 144.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,emit,Complex Method,Cyclomatic complexity of the method is 11
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpec,overriding,Complex Conditional,The conditional expression modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.FINAL) || modifiers.contains(Modifier.STATIC) is complex.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocator,toJavaIdentifier,Complex Conditional,The conditional expression i == 0 && !Character.isJavaIdentifierStart(codePoint) && Character.isJavaIdentifierPart(codePoint) is complex.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "ParameterizedType ownerType=(type.getOwnerType() instanceof ParameterizedType) && !Modifier.isStatic(((Class<?>)type.getRawType()).getModifiers()) ? (ParameterizedType)type.getOwnerType() : null;" is 195.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ParameterizedTypeName,get,Long Statement,The length of the statement "return (ownerType != null) ? get(ownerType`map).nestedClass(rawType.simpleName()`typeArguments) : new ParameterizedTypeName(null`rawType`typeArguments);" is 152.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,isBoxedPrimitive,Long Statement,The length of the statement "return this.equals(BOXED_BOOLEAN) || this.equals(BOXED_BYTE) || this.equals(BOXED_SHORT)|| this.equals(BOXED_INT)|| this.equals(BOXED_LONG)|| this.equals(BOXED_CHAR)|| this.equals(BOXED_FLOAT)|| this.equals(BOXED_DOUBLE);" is 221.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,box,Complex Method,Cyclomatic complexity of the method is 11
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,unbox,Complex Method,Cyclomatic complexity of the method is 11
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 12
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Complex Method,Cyclomatic complexity of the method is 9
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitPrimitive,Missing default,The following switch statement is missing a default case: switch (t.getKind()) {
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "TypeName enclosing=(enclosingType.getKind() != TypeKind.NONE) && !t.asElement().getModifiers().contains(Modifier.STATIC) ? enclosingType.accept(this`null) : null;" is 162.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,visitDeclared,Long Statement,The length of the statement "return enclosing instanceof ParameterizedTypeName ? ((ParameterizedTypeName)enclosing).nestedClass(rawType.simpleName()`typeArgumentNames) : new ParameterizedTypeName(null`rawType`typeArgumentNames);" is 199.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeName,get,Complex Method,Cyclomatic complexity of the method is 16
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression fieldSpecs.isEmpty() && methodSpecs.isEmpty() && typeSpecs.isEmpty() is complex.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Conditional,The conditional expression !fieldSpecs.isEmpty() || !methodSpecs.isEmpty() || !typeSpecs.isEmpty() is complex.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Complex Method,Cyclomatic complexity of the method is 36
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,emit,Long Method,The method has 136 lines of code.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Complex Method,Cyclomatic complexity of the method is 17
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpec,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Complex Method,Cyclomatic complexity of the method is 17
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(enumConstant.getValue().anonymousTypeArguments != null`"enum constants must have anonymous type arguments");" is 122.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkState(methodSpec.modifiers.equals(kind.implicitMethodModifiers)`"%s %s.%s requires modifiers %s"`kind`name`methodSpec.name`kind.implicitMethodModifiers);" is 158.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(typeSpec.modifiers.containsAll(kind.implicitTypeModifiers)`"%s %s.%s requires modifiers %s"`kind`name`typeSpec.name`kind.implicitTypeModifiers);" is 158.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(isAbstract || !methodSpec.hasModifier(Modifier.ABSTRACT)`"non-abstract type %s cannot declare abstract method %s"`name`methodSpec.name);" is 150.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Builder,build,Long Statement,The length of the statement "checkArgument(anonymousTypeArguments == null || interestingSupertypeCount <= 1`"anonymous type has too many supertypes");" is 121.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Complex Method,Cyclomatic complexity of the method is 9
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Util,characterLiteralWithoutSingleQuotes,Missing default,The following switch statement is missing a default case: switch (c) {
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,Util,stringLiteralWithDoubleQuotes,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,errorTypes,Long Statement,The length of the statement "JavaFileObject hasErrorTypes=JavaFileObjects.forSourceLines("com.squareup.tacos.ErrorTypes"`"package com.squareup.tacos;"`""`"@SuppressWarnings(\"hook-into-compiler\")"`"class ErrorTypes {"`" Tacos tacos;"`" Ingredients.Guacamole guacamole;"`"}");" is 247.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(3).asType())).isEqualTo(TypeVariableName.get("ExtendsTypeVariable"`TypeVariableName.get("Simple")));" is 142.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(typeVariables.get(5).asType())).isEqualTo(TypeVariableName.get("IntersectionOfInterfaces"`runnable`serializable));" is 138.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 3
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 5
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirror,Magic Number,The method contains a magic number: 4
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getTypeVariableTypeMirrorRecursive,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getArrayTypeMirror,Long Statement,The length of the statement "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class)))).isEqualTo(ArrayTypeName.of(ClassName.OBJECT));" is 121.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,getNullTypeMirror,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AbstractTypesTest,unbox,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,withoutAnnotationsOnAnnotatedEnclosingAndNestedType,Long Statement,The length of the statement "TypeName type=((ClassName)TypeName.get(Map.class).annotated(TYPE_USE_ANNOTATION)).nestedClass("Entry").annotated(TYPE_USE_ANNOTATION);" is 134.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,AnnotatedTypeNameTest,annotatedArrayTypeInVarargsParameter,Long Statement,The length of the statement "MethodSpec varargsMethod=MethodSpec.methodBuilder("m").addParameter(ParameterSpec.builder(type`"p").build()).varargs().build();" is 127.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 620.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationWithImport,Long Statement,The length of the statement "assertThat(file.toString()).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " f = 11.1`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " l = Override.class`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class IsAnnotated {\n"+ "}\n");" is 573.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}" + ")");" is 134.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,emptyArray,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {}` m = {}" + ")");" is 142.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + ")");" is 191.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "})");" is 326.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,dynamicArrayOfEnumConstants,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "n = {" + "com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES"+ "` com.squareup.javapoet.AnnotationSpecTest.Breakfast.WAFFLES"+ "})");" is 390.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Long Statement,The length of the statement "assertThat(builder.build().toString()).isEqualTo("@com.squareup.javapoet.AnnotationSpecTest.HasDefaultsAnnotation(" + "o = com.squareup.javapoet.AnnotationSpecTest.Breakfast.PANCAKES" + "` p = 1701"+ "` f = 11.1"+ "` m = {9` 8` 1` 123}"+ "` l = java.lang.Override.class"+ "` j = @com.squareup.javapoet.AnnotationSpecTest.AnnotationA"+ "` q = @com.squareup.javapoet.AnnotationSpecTest.AnnotationC(\"bar\")"+ "` r = {java.lang.Float.class` java.lang.Double.class}"+ ")");" is 469.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,defaultAnnotationToBuilder,Magic Number,The method contains a magic number: 123
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotation,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " f = 11.1`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 577.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,IsAnnotated,reflectAnnotationWithDefaults,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.javapoet.AnnotationSpecTest;\n"+ "import java.lang.Double;\n"+ "import java.lang.Float;\n"+ "import java.lang.Override;\n"+ "\n"+ "@AnnotationSpecTest.HasDefaultsAnnotation(\n"+ " a = 5`\n"+ " b = 6`\n"+ " c = 7`\n"+ " d = 8`\n"+ " e = 9.0f`\n"+ " f = 11.1`\n"+ " g = {\n"+ " '\\u0000'`\n"+ " '쫾'`\n"+ " 'z'`\n"+ " '€'`\n"+ " 'ℕ'`\n"+ " '\"'`\n"+ " '\\''`\n"+ " '\\t'`\n"+ " '\\n'\n"+ " }`\n"+ " h = true`\n"+ " i = AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " j = @AnnotationSpecTest.AnnotationA`\n"+ " k = \"maple\"`\n"+ " l = Override.class`\n"+ " m = {\n"+ " 9`\n"+ " 8`\n"+ " 1\n"+ " }`\n"+ " n = {\n"+ " AnnotationSpecTest.Breakfast.WAFFLES`\n"+ " AnnotationSpecTest.Breakfast.PANCAKES\n"+ " }`\n"+ " o = AnnotationSpecTest.Breakfast.PANCAKES`\n"+ " p = 1701`\n"+ " q = @AnnotationSpecTest.AnnotationC(\"bar\")`\n"+ " r = {\n"+ " Float.class`\n"+ " Double.class\n"+ " }\n"+ ")\n"+ "class Taco {\n"+ "}\n");" is 1020.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_nestedClass,Long Statement,The length of the statement "assertThat(ClassName.bestGuess(OuterClass.InnerClass.class.getCanonicalName())).isEqualTo(ClassName.get("com.squareup.javapoet"`"ClassNameTest"`"OuterClass"`"InnerClass"));" is 172.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,bestGuessForString_defaultPackage,Long Statement,The length of the statement "assertThat(ClassName.bestGuess("SomeClass.Nested.EvenMore")).isEqualTo(ClassName.get(""`"SomeClass"`"Nested"`"EvenMore"));" is 122.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,assertBestGuessThrows,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromTypeElementDoesntUseGetKind,Long Statement,The length of the statement "assertThat(ClassName.get(preventGetKind(inner)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat(ClassName.get(OuterClass.InnerClass.class).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.OuterClass.InnerClass");" is 137.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,classNameFromClass,Long Statement,The length of the statement "assertThat((ClassName.get($Outer.$Inner.class)).toString()).isEqualTo("com.squareup.javapoet.ClassNameTest.$Outer.$Inner");" is 123.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ClassNameTest,fromClassRejectionTypes,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CodeBlockTest,repeatedNamedArgument,Long Statement,The length of the statement "CodeBlock block=CodeBlock.builder().addNamed("\"I like \" + $text:S + \". Do you like \" + $text:S + \"?\""`map).build();" is 121.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FieldSpecTest,modifyAnnotations,Long Statement,The length of the statement "FieldSpec.Builder builder=FieldSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 129.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectUri,Long Statement,The length of the statement "assertThat(JavaFile.builder("com.example"`type).build().toJavaFileObject().toUri()).isEqualTo(URI.create("com/example/Test.java"));" is 131.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectCharacterContent,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addJavadoc("Pi\u00f1ata\u00a1").addMethod(MethodSpec.methodBuilder("fooBar").build()).build();" is 138.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,javaFileObjectInputStreamIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Test").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder("Test").addModifiers(Modifier.PUBLIC).addSuperinterface(ParameterizedTypeName.get(Callable.class`String.class)).addMethod(MethodSpec.methodBuilder("call").returns(String.class).addModifiers(Modifier.PUBLIC).addStatement("return $S"`value).build()).build();" is 292.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`Collections.emptySet()`Collections.emptySet()`Collections.singleton(javaFile.toJavaFileObject()));" is 173.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileReadingTest,compileJavaFile,Long Statement,The length of the statement "Callable<?> test=Class.forName("foo.Test"`true`loader).asSubclass(Callable.class).getDeclaredConstructor().newInstance();" is 121.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerPassesOriginatingElements,Long Statement,The length of the statement "TypeSpec test2=TypeSpec.classBuilder("Test2").addOriginatingElement(element2_1).addOriginatingElement(element2_2).build();" is 122.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "TypeSpec test=TypeSpec.classBuilder("Test").addField(Date.class`"madeFreshDate").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build();" is 284.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,filerClassesWithTabIndent,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package foo;\n" + "\n"+ "import java.lang.String;\n"+ "import java.lang.System;\n"+ "import java.util.Date;\n"+ "\n"+ "class Test {\n"+ "\tDate madeFreshDate;\n"+ "\n"+ "\tpublic static void main(String[] args) {\n"+ "\t\tSystem.out.println(\"Hello World!\");\n"+ "\t}\n"+ "}\n");" is 315.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "JavaFile javaFile=JavaFile.builder("foo"`TypeSpec.classBuilder("Taco").build()).addFileComment("Pi\u00f1ata\u00a1").build();" is 124.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,FileWritingTest,fileIsUtf8,Long Statement,The length of the statement "assertThat(new String(Files.readAllBytes(fooPath)`UTF_8)).isEqualTo("" + "// Pi\u00f1ata\u00a1\n" + "package foo;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 149.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "MethodSpec beyond=MethodSpec.methodBuilder("beyond").returns(listOfHoverboards).addStatement("$T result = new $T<>()"`listOfHoverboards`arrayList).addStatement("result.add($T.createNimbus(2000))"`hoverboard).addStatement("result.add($T.createNimbus(\"2001\"))"`hoverboard).addStatement("result.add($T.createNimbus($T.THUNDERBOLT))"`hoverboard`namedBoards).addStatement("$T.sort(result)"`Collections.class).addStatement("return result.isEmpty() ? $T.emptyList() : result"`Collections.class).build();" is 498.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "JavaFile example=JavaFile.builder("com.example.helloworld"`hello).addStaticImport(hoverboard`"createNimbus").addStaticImport(namedBoards`"*").addStaticImport(Collections.class`"*").build();" is 189.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticReadmeExample,Long Statement,The length of the statement "assertThat(example.toString()).isEqualTo("" + "package com.example.helloworld;\n" + "\n"+ "import static com.mattel.Hoverboard.Boards.*;\n"+ "import static com.mattel.Hoverboard.createNimbus;\n"+ "import static java.util.Collections.*;\n"+ "\n"+ "import com.mattel.Hoverboard;\n"+ "import java.util.ArrayList;\n"+ "import java.util.List;\n"+ "\n"+ "class HelloWorld {\n"+ " List<Hoverboard> beyond() {\n"+ " List<Hoverboard> result = new ArrayList<>();\n"+ " result.add(createNimbus(2000));\n"+ " result.add(createNimbus(\"2001\"));\n"+ " result.add(createNimbus(THUNDERBOLT));\n"+ " sort(result);\n"+ " return result.isEmpty() ? emptyList() : result;\n"+ " }\n"+ "}\n");" is 671.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticForCrazyFormatsWorks,Long Statement,The length of the statement "JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("$T"`Runtime.class).addStatement("$T.a()"`Runtime.class).addStatement("$T.X"`Runtime.class).addStatement("$T$T"`Runtime.class`Runtime.class).addStatement("$T.$T"`Runtime.class`Runtime.class).addStatement("$1T$1T"`Runtime.class).addStatement("$1T$2L$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T"`Runtime.class`"?").addStatement("$1T$2L$2S$1T$3N$1T"`Runtime.class`"?"`method).addStatement("$T$L"`Runtime.class`"?").addStatement("$T$S"`Runtime.class`"?").addStatement("$T$N"`Runtime.class`method).build()).build()).addStaticImport(Runtime.class`"*").build().toString();" is 687.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addStaticBlock(CodeBlock.builder().addStatement("assert $1T.valueOf(\"BLOCKED\") == $1T.BLOCKED"`Thread.State.class).addStatement("$T.gc()"`System.class).addStatement("$1T.out.println($1T.nanoTime())"`System.class).build()).addMethod(MethodSpec.constructorBuilder().addParameter(Thread.State[].class`"states").varargs(true).build()).build()).addStaticImport(Thread.State.BLOCKED).addStaticImport(System.class`"*").addStaticImport(Thread.State.class`"valueOf").build();" is 552.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticMixed,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.lang.Thread.State.BLOCKED;\n"+ "import static java.lang.Thread.State.valueOf;\n"+ "\n"+ "import java.lang.Thread;\n"+ "\n"+ "class Taco {\n"+ " static {\n"+ " assert valueOf(\"BLOCKED\") == BLOCKED;\n"+ " gc();\n"+ " out.println(nanoTime());\n"+ " }\n"+ "\n"+ " Taco(Thread.State... states) {\n"+ " }\n"+ "}\n");" is 456.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "JavaFile source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("main").addStatement("$T.$L.println($S)"`System.class`"out"`"hello").build()).build()).addStaticImport(System.class`"out").build();" is 250.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticDynamic,Long Statement,The length of the statement "assertThat(source.toString()).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.lang.System.out;\n"+ "\n"+ "class Taco {\n"+ " void main() {\n"+ " out.println(\"hello\");\n"+ " }\n"+ "}\n");" is 215.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticNone,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return TimeUnit.SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 385.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticOnce,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "import java.util.concurrent.TimeUnit;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` TimeUnit.MINUTES);\n"+ " }\n"+ "}\n");" is 474.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTwice,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.SECONDS).addStaticImport(TimeUnit.MINUTES).build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.util.concurrent.TimeUnit.MINUTES;\n"+ "import static java.util.concurrent.TimeUnit.SECONDS;\n"+ "\n"+ "import java.lang.System;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " System.gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 514.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticUsingWildcards,Long Statement,The length of the statement "assertThat(JavaFile.builder("readme"`importStaticTypeSpec("Util")).addStaticImport(TimeUnit.class`"*").addStaticImport(System.class`"*").build().toString()).isEqualTo("" + "package readme;\n" + "\n"+ "import static java.lang.System.*;\n"+ "import static java.util.concurrent.TimeUnit.*;\n"+ "\n"+ "class Util {\n"+ " public static long minutesToSeconds(long minutes) {\n"+ " gc();\n"+ " return SECONDS.convert(minutes` MINUTES);\n"+ " }\n"+ "}\n");" is 448.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,importStaticTypeSpec,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("minutesToSeconds").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(long.class).addParameter(long.class`"minutes").addStatement("$T.gc()"`System.class).addStatement("return $1T.SECONDS.convert(minutes` $1T.MINUTES)"`TimeUnit.class).build();" is 289.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").build()).build().toString();" is 147.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,singleImport,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "}\n");" is 159.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Date.class`"madeFreshDate").addField(ClassName.get("java.sql"`"Date")`"madeFreshDatabaseDate").build()).build().toString();" is 214.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Date;\n"+ "\n"+ "class Taco {\n"+ " Date madeFreshDate;\n"+ "\n"+ " java.sql.Date madeFreshDatabaseDate;\n"+ "}\n");" is 208.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ParameterizedTypeName.get(ClassName.get(List.class)`ClassName.get("com.squareup.meat"`"Chorizo").annotated(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"Spicy")).build()))`"chorizo").build()).build().toString();" is 315.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotatedTypeParam,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.meat.Chorizo;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<@Spicy Chorizo> chorizo;\n"+ "}\n");" is 208.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("java.lang"`"Float")`"litres").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").build()).skipJavaLangImports(true).build().toString();" is 254.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassLast,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " Float litres;\n"+ "\n"+ " com.squareup.soda.Float beverage;\n"+ "}\n");" is 165.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.soda"`"Float")`"beverage").addField(ClassName.get("java.lang"`"Float")`"litres").build()).skipJavaLangImports(true).build().toString();" is 254.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,skipJavaLangImportsWithConflictingClassFirst,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.soda.Float;\n"+ "\n"+ "class Taco {\n"+ " Float beverage;\n"+ "\n"+ " java.lang.Float litres;\n"+ "}\n");" is 200.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("Twin").build()).addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingParentName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class Twin {\n"+ " }\n"+ "\n"+ " class C {\n"+ " A.Twin.D d;\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 398.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingChildName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " A.Twin.D d;\n"+ "\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 252.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("A").addType(TypeSpec.classBuilder("B").addType(TypeSpec.classBuilder("C").addField(ClassName.get("com.squareup.tacos"`"A"`"Twin"`"D")`"d").addType(TypeSpec.classBuilder("Nested").addType(TypeSpec.classBuilder("Twin").build()).build()).build()).build()).addType(TypeSpec.classBuilder("Twin").addType(TypeSpec.classBuilder("D").build()).build()).build()).build().toString();" is 447.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingNameOutOfScope,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class A {\n"+ " class B {\n"+ " class C {\n"+ " Twin.D d;\n"+ "\n"+ " class Nested {\n"+ " class Twin {\n"+ " }\n"+ " }\n"+ " }\n"+ " }\n"+ "\n"+ " class Twin {\n"+ " class D {\n"+ " }\n"+ " }\n"+ "}\n");" is 279.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.squareup.wire"`"Message")).addType(TypeSpec.classBuilder("Builder").superclass(ClassName.get("com.squareup.wire"`"Message"`"Builder")).build()).build()).build().toString();" is 284.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,nestedClassAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.wire.Message;\n"+ "\n"+ "class Taco extends Message {\n"+ " class Builder extends Message.Builder {\n"+ " }\n"+ "}\n");" is 214.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 160.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,classAndSuperclassShareName,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.Taco {\n"+ "}\n");" is 126.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(ClassName.get("com.taco.bell"`"Taco")).build()).build().toString();" is 163.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotation,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@com.taco.bell.Taco\n"+ "class Taco {\n"+ "}\n");" is 124.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addAnnotation(AnnotationSpec.builder(ClassName.get("com.squareup.tacos"`"MyAnno")).addMember("value"`"$T.class"`ClassName.get("com.taco.bell"`"Taco")).build()).build()).build().toString();" is 270.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingAnnotationReferencedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MyAnno(com.taco.bell.Taco.class)\n"+ "class Taco {\n"+ "}\n");" is 138.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addTypeVariable(TypeVariableName.get("T"`ClassName.get("com.taco.bell"`"Taco"))).build()).build().toString();" is 191.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,conflictingTypeVariableBound,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco<T extends com.taco.bell.Taco> {\n"+ "}\n");" is 129.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ParameterizedTypeName.get(ClassName.get(Comparable.class)`ClassName.get("com.squareup.tacos"`"Taco"))).build()).build().toString();" is 224.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,superclassReferencesSelf,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "\n"+ "class Taco extends Comparable<Taco> {\n"+ "}\n");" is 164.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("TestComponent").addAnnotation(ClassName.get("dagger"`"Component")).addType(TypeSpec.classBuilder("Builder").addAnnotation(ClassName.get("dagger"`"Component"`"Builder")).build()).build()).build().toString();" is 281.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,annotationIsNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import dagger.Component;\n"+ "\n"+ "@Component\n"+ "class TestComponent {\n"+ " @Component.Builder\n"+ " class Builder {\n"+ " }\n"+ "}\n");" is 215.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "String source=JavaFile.builder(""`TypeSpec.classBuilder("HelloWorld").addMethod(MethodSpec.methodBuilder("main").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addParameter(String[].class`"args").addCode("$T.out.println($S);\n"`System.class`"Hello World!").build()).build()).build().toString();" is 293.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackage,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "import java.lang.String;\n" + "import java.lang.System;\n"+ "\n"+ "class HelloWorld {\n"+ " public static void main(String[] args) {\n"+ " System.out.println(\"Hello World!\");\n"+ " }\n"+ "}\n");" is 231.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,defaultPackageTypesAreNotImported,Long Statement,The length of the statement "String source=JavaFile.builder("hello"`TypeSpec.classBuilder("World").addSuperinterface(ClassName.get(""`"Test")).build()).build().toString();" is 142.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("Generated $L by JavaPoet. DO NOT EDIT!"`"2015-01-13").build().toString();" is 180.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,topOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "// Generated 2015-01-13 by JavaPoet. DO NOT EDIT!\n" + "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 154.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addFileComment("\nGENERATED FILE:\n\nDO NOT EDIT!\n").build().toString();" is 164.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,emptyLinesInTopOfFileComment,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "//\n" + "// GENERATED FILE:\n"+ "//\n"+ "// DO NOT EDIT!\n"+ "//\n"+ "package com.squareup.tacos;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 168.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("com.squareup.tacos"`"A")`"a").addType(TypeSpec.classBuilder("A").build()).build()).build().toString();" is 208.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithNestedClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " com.squareup.tacos.A a;\n"+ "\n"+ " class A {\n"+ " }\n"+ "}\n");" is 159.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").superclass(ClassName.get("com.taco.bell"`"A")).addField(ClassName.get("com.squareup.tacos"`"A")`"a").build()).build().toString();" is 211.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,packageClassConflictsWithSuperlass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco extends com.taco.bell.A {\n"+ " A a;\n"+ "}\n");" is 134.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "JavaFile.Builder builder=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").build()).addStaticImport(File.class`"separator");" is 142.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,modifyStaticImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import static java.io.File.separatorChar;\n"+ "\n"+ "class Taco {\n"+ "}\n");" is 152.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).build().toString();" is 166.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySimple,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(Thread.class`"thread").alwaysQualify("Thread").build()).skipJavaLangImports(true).build().toString();" is 192.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,alwaysQualifySupersedesJavaLangImports,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " java.lang.Thread thread;\n"+ "}\n");" is 130.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(Foo.class).build()).build().toString();" is 367.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaClass,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").avoidClashesWithNestedClasses(getElement(Foo.class)).build()).build().toString();" is 379.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaTypeElement,Long Statement,The length of the statement "assertThat(source).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "}\n");" is 285.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.tacos"`TypeSpec.classBuilder("Taco").addField(ClassName.get("other"`"NestedTypeA")`"nestedA").addField(ClassName.get("other"`"NestedTypeB")`"nestedB").addField(ClassName.get("other"`"NestedTypeC")`"nestedC").addField(ClassName.get("other"`"Foo")`"foo").addType(TypeSpec.classBuilder("NestedTypeA").build()).addType(TypeSpec.classBuilder("NestedTypeB").build()).addSuperinterface(FooInterface.class).build()).build().toString();" is 472.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashesWithNestedClasses_viaSuperinterfaceType,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.tacos;\n" + "\n" + "import com.squareup.javapoet.JavaFileTest;\n"+ "import other.Foo;\n"+ "import other.NestedTypeC;\n"+ "\n"+ "class Taco implements JavaFileTest.FooInterface {\n"+ " other.NestedTypeA nestedA;\n"+ "\n"+ " other.NestedTypeB nestedB;\n"+ "\n"+ " NestedTypeC nestedC;\n"+ "\n"+ " Foo foo;\n"+ "\n"+ " class NestedTypeA {\n"+ " }\n"+ "\n"+ " class NestedTypeB {\n"+ " }\n"+ "}\n");" is 446.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,childTypeBuilder,Long Statement,The length of the statement "return TypeSpec.classBuilder("Child").addMethod(MethodSpec.methodBuilder("optionalString").returns(ParameterizedTypeName.get(Optional.class`String.class)).addStatement("return $T.empty()"`Optional.class).build()).addMethod(MethodSpec.methodBuilder("pattern").returns(Pattern.class).addStatement("return null").build());" is 319.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(Parent.class).build()).build().toString();" is 127.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().superclass(getElement(Parent.class).asType()).build()).build().toString();" is 148.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superclass_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "\n"+ "class Child extends JavaFileTest.Parent {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " java.util.regex.Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 339.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(ParentInterface.class).build()).build().toString();" is 143.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_type,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`childTypeBuilder().addSuperinterface(getElement(ParentInterface.class).asType()).build()).build().toString();" is 164.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_parentChild_superinterface_typeMirror,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.lang.String;\n"+ "import java.util.regex.Pattern;\n"+ "\n"+ "class Child implements JavaFileTest.ParentInterface {\n"+ " java.util.Optional<String> optionalString() {\n"+ " return java.util.Optional.empty();\n"+ " }\n"+ "\n"+ " Pattern pattern() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 372.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "String source=JavaFile.builder("com.squareup.javapoet"`TypeSpec.classBuilder("MapType").addMethod(MethodSpec.methodBuilder("optionalString").returns(ClassName.get("com.foo"`"Entry")).addStatement("return null").build()).addSuperinterface(Map.class).build()).build().toString();" is 277.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,JavaFileTest,avoidClashes_mapEntry,Long Statement,The length of the statement "assertThat(source).isEqualTo("package com.squareup.javapoet;\n" + "\n" + "import java.util.Map;\n"+ "\n"+ "class MapType implements Map {\n"+ " com.foo.Entry optionalString() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 215.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrap,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrap,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,zeroWidthNoWrap,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,nospaceWrapMax,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,multipleWrite,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepost,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,fencepostZeroWidth,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithoutLeadingSpace,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingSpace,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,overlyLongLinesWithLeadingZeroWidth,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapEmbeddedNewlines_ZeroWidth,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,noWrapMultipleNewlines,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 10
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,LineWrapperTest,wrapMultipleNewlines,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideEverything,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "protected <T extends java.lang.Runnable & java.io.Closeable> java.lang.Runnable "+ "everything(\n"+ " java.lang.String arg0` java.util.List<? extends T> arg1) throws java.io.IOException`\n"+ " java.lang.SecurityException {\n"+ "}\n");" is 306.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideGenerics,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "<T` R` V extends java.lang.Throwable> T run(R param) throws V {\n"+ " return null;\n"+ "}\n");" is 166.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyDefaultModifier,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.util.Spliterator<java.lang.Object> spliterator() {\n"+ "}\n");" is 146.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.Integer call() throws java.lang.Exception {\n"+ "}\n");" is 144.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public int compareTo(" + ExtendsOthers.class.getCanonicalName() + " arg0) {\n"+ "}\n");" is 159.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideExtendsOthersWorksWithActualTypeParameters,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public void fail() throws java.lang.IllegalStateException {\n"+ "}\n");" is 143.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideFinalClassMethod,Long Statement,The length of the statement "assertThat(expected).hasMessageThat().isEqualTo("Cannot override method on final class com.squareup.javapoet.MethodSpecTest.FinalClass");" is 137.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,overrideDoesNotCopyParameterAnnotations,Long Statement,The length of the statement "TypeSpec type=TypeSpec.classBuilder(implClassName).superclass(abstractTypeElement.asType()).addMethod(MethodSpec.overriding(fooElement).build()).build();" is 153.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addModifiers(Modifier.PRIVATE).addParameter(TypeName.DOUBLE`"money").addJavadoc("Gets the best Taco\n").build();" is 170.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withoutParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco\n"+ " */\n"+ "private void getTaco(double money) {\n"+ "}\n");" is 144.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).addJavadoc("Gets the best Taco money can buy.\n").build();" is 348.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * Gets the best Taco money can buy.\n"+ " *\n"+ " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 277.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("getTaco").addParameter(ParameterSpec.builder(TypeName.DOUBLE`"money").addJavadoc("the amount required to buy the taco.\n").build()).addParameter(ParameterSpec.builder(TypeName.INT`"count").addJavadoc("the number of Tacos to buy.\n").build()).build();" is 298.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,withParameterJavaDocAndWithoutMethodJavadoc,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "/**\n" + " * @param money the amount required to buy the taco.\n"+ " * @param count the number of Tacos to buy.\n"+ " */\n"+ "void getTaco(double money` int count) {\n"+ "}\n");" is 227.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("duplicateExceptions").addException(ioException).addException(timeoutException).addException(timeoutException).addException(ioException).build();" is 192.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,duplicateExceptionsIgnored,Long Statement,The length of the statement "assertThat(methodSpec.toBuilder().addException(ioException).build().exceptions).isEqualTo(Arrays.asList(ioException`timeoutException));" is 135.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyAnnotations,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 127.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,modifyTypeVariables,Long Statement,The length of the statement "MethodSpec.Builder builder=MethodSpec.methodBuilder("foo").addTypeVariable(t).addTypeVariable(TypeVariableName.get("V"));" is 121.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow(named("if ($field:N > $threshold:L)"`m)).nextControlFlow(named("else if ($field:N == $threshold:L)"`m)).endControlFlow().build();" is 203.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,controlFlowWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " if (valueField > 5) {\n"+ " } else if (valueField == 5) {\n"+ " }\n"+ "}\n");" is 150.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "MethodSpec methodSpec=MethodSpec.methodBuilder("method").beginControlFlow("do").addStatement(named("$field:N--"`m)).endControlFlow(named("while ($field:N > $threshold:L)"`m)).build();" is 183.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,MethodSpecTest,doWhileWithNamedCodeBlocks,Long Statement,The length of the statement "assertThat(methodSpec.toString()).isEqualTo("" + "void method() {\n" + " do {\n"+ " valueField--;\n"+ " } while (valueField > 5);\n"+ "}\n");" is 141.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,usage,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,nameCollisionWithTag,Magic Number,The method contains a magic number: 3
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,characterMappingInvalidStartButValidPart,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 2
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,NameAllocatorTest,cloneUsage,Magic Number,The method contains a magic number: 3
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,ParameterSpecTest,modifyAnnotations,Long Statement,The length of the statement "ParameterSpec.Builder builder=ParameterSpec.builder(int.class`"foo").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 137.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerClassInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));" is 162.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType())`TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));" is 162.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,innerGenericInGenericType,Long Statement,The length of the statement "assertThat(genericTypeName.toString()).isEqualTo(TestGeneric.class.getCanonicalName() + "<java.lang.Short>.InnerGeneric<java.lang.Long>");" is 138.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeParameterizedTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class`UUID.class)`ParameterizedTypeName.get(Set.class`UUID.class));" is 129.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeNameTest,equalsAndHashCodeWildcardTypeName,Long Statement,The length of the statement "assertEqualsHashCodeAndToString(WildcardTypeName.subtypeOf(Serializable.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 127.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypesEclipseTest,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,CompilationRule,compile,Long Statement,The length of the statement "JavaCompiler.CompilationTask task=compiler.getTask(null`fileManager`diagnosticCollector`ImmutableSet.of()`ImmutableSet.of(TypesEclipseTest.class.getCanonicalName())`ImmutableSet.of());" is 184.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC`Modifier.FINAL).returns(String.class).addCode("return $S;\n"`"taco").build()).build();" is 236.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public final String toString() {\n"+ " return \"taco\";\n"+ " }\n"+ "}\n");" is 261.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,basic,Magic Number,The method contains a magic number: 472949424
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeName listOfExtends=ParameterizedTypeName.get(ClassName.get(List.class)`WildcardTypeName.subtypeOf(Serializable.class));" is 123.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(listOfAny`"extendsObject").addField(listOfExtends`"extendsSerializable").addField(listOfSuper`"superString").build();" is 170.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interestingTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " List<?> extendsObject;\n"+ "\n"+ " List<? extends Serializable> extendsSerializable;\n"+ "\n"+ " List<? super String> superString;\n"+ "}\n");" is 342.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aSimpleThung=TypeSpec.anonymousClassBuilder(CodeBlock.of("$N"`thungParameter)).superclass(simpleThungOfBar).addMethod(MethodSpec.methodBuilder("doSomething").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(bar`"bar").addCode("/* code snippets */\n").build()).build();" is 301.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec aThingThang=TypeSpec.anonymousClassBuilder("").superclass(thingThangOfFooBar).addMethod(MethodSpec.methodBuilder("call").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(thungOfSuperBar).addParameter(thungParameter).addCode("return $L;\n"`aSimpleThung).build()).build();" is 298.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(thingThangOfFooBar`"NAME").addModifiers(Modifier.STATIC`Modifier.FINAL`Modifier.FINAL).initializer("$L"`aThingThang).build()).build();" is 205.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousInnerClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "class Taco {\n"+ " static final Thing.Thang<Foo` Bar> NAME = new Thing.Thang<Foo` Bar>() {\n"+ " @Override\n"+ " public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"+ " return new SimpleThung<Bar>(thung) {\n"+ " @Override\n"+ " public void doSomething(Bar bar) {\n"+ " /* code snippets */\n"+ " }\n"+ " };\n"+ " }\n"+ " };\n"+ "}\n");" is 470.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "TypeSpec service=TypeSpec.classBuilder("Foo").addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(long.class`"id").addParameter(ParameterSpec.builder(String.class`"one").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"two").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addParameter(ParameterSpec.builder(String.class`"three").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Pong")).addMember("value"`"$S"`"pong").build()).build()).addParameter(ParameterSpec.builder(String.class`"four").addAnnotation(ClassName.get(tacosPackage`"Ping")).build()).addCode("/* code snippets */\n").build()).build();" is 720.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedParameters,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Foo {\n"+ " public Foo(long id` @Ping String one` @Ping String two` @Pong(\"pong\") String three`\n"+ " @Ping String four) {\n"+ " /* code snippets */\n"+ " }\n"+ "}\n");" is 298.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("EthicalTaco").addField(ClassName.get(String.class).annotated(AnnotationSpec.builder(freeRange).build())`"meat").build();" is 157.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsAndJavaLangTypes,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import javax.annotation.FreeRange;\n"+ "\n"+ "class EthicalTaco {\n"+ " @FreeRange String meat;\n"+ "}\n");" is 220.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "TypeSpec service=TypeSpec.interfaceBuilder("Service").addMethod(MethodSpec.methodBuilder("fooBar").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).addAnnotation(AnnotationSpec.builder(headers).addMember("value"`"$S"`"Accept: application/json").addMember("value"`"$S"`"User-Agent: foobar").build()).addAnnotation(AnnotationSpec.builder(post).addMember("value"`"$S"`"/foo/bar").build()).returns(ParameterizedTypeName.get(observable`fooBar)).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(things`thing)`"things").addAnnotation(body).build()).addParameter(ParameterSpec.builder(ParameterizedTypeName.get(map`string`string)`"query").addAnnotation(AnnotationSpec.builder(queryMap).addMember("encodeValues"`"false").build()).build()).addParameter(ParameterSpec.builder(string`"authorization").addAnnotation(AnnotationSpec.builder(header).addMember("value"`"$S"`"Authorization").build()).build()).build()).build();" is 920.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,retrofitStyleInterface,Long Statement,The length of the statement "assertThat(toString(service)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "import java.util.Map;\n"+ "\n"+ "interface Service {\n"+ " @Headers({\n"+ " \"Accept: application/json\"`\n"+ " \"User-Agent: foobar\"\n"+ " })\n"+ " @POST(\"/foo/bar\")\n"+ " Observable<FooBar> fooBar(@Body Things<Thing> things`\n"+ " @QueryMap(encodeValues = false) Map<String` String> query`\n"+ " @Header(\"Authorization\") String authorization);\n"+ "}\n");" is 478.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"thing"`Modifier.PRIVATE`Modifier.FINAL).addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"JsonAdapter")).addMember("value"`"$T.class"`ClassName.get(tacosPackage`"Foo")).build()).build()).build();" is 295.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedField,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @JsonAdapter(Foo.class)\n"+ " private final String thing;\n"+ "}\n");" is 207.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Foo").addAnnotation(AnnotationSpec.builder(ClassName.get(tacosPackage`"Something")).addMember("hi"`"$T.$N"`someType`"FIELD").addMember("hey"`"$L"`12).addMember("hello"`"$S"`"goodbye").build()).addModifiers(Modifier.PUBLIC).build();" is 268.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@Something(\n"+ " hi = SomeType.FIELD`\n"+ " hey = 12`\n"+ " hello = \"goodbye\"\n"+ ")\n"+ "public class Foo {\n"+ "}\n");" is 206.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotatedClass,Magic Number,The method contains a magic number: 12
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addJavadoc("Avalanche!\n").build()).addEnumConstant("PAPER"`TypeSpec.anonymousClassBuilder("$S"`"flat").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"paper airplane!").build()).build()).addEnumConstant("SCISSORS"`TypeSpec.anonymousClassBuilder("$S"`"peace sign").build()).addField(String.class`"handPosition"`Modifier.PRIVATE`Modifier.FINAL).addMethod(MethodSpec.constructorBuilder().addParameter(String.class`"handPosition").addCode("this.handPosition = handPosition;\n").build()).addMethod(MethodSpec.constructorBuilder().addCode("this($S);\n"`"fist").build()).build();" is 817.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithSubclassing,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "public enum Roshambo {\n"+ " /**\n"+ " * Avalanche!\n"+ " */\n"+ " ROCK`\n"+ "\n"+ " PAPER(\"flat\") {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"paper airplane!\";\n"+ " }\n"+ " }`\n"+ "\n"+ " SCISSORS(\"peace sign\");\n"+ "\n"+ " private final String handPosition;\n"+ "\n"+ " Roshambo(String handPosition) {\n"+ " this.handPosition = handPosition;\n"+ " }\n"+ "\n"+ " Roshambo() {\n"+ " this(\"fist\");\n"+ " }\n"+ "}\n");" is 601.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Tortilla").addModifiers(Modifier.PUBLIC).addEnumConstant("CORN"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("fold").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).build();" is 368.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumsMayDefineAbstractMethods,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "\n"+ "public enum Tortilla {\n"+ " CORN {\n"+ " @Override\n"+ " public void fold() {\n"+ " }\n"+ " };\n"+ "\n"+ " public abstract void fold();\n"+ "}\n");" is 273.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumConstantsRequired,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,onlyEnumsMayHaveEnumConstants,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addEnumConstant("SPOCK"`TypeSpec.anonymousClassBuilder("").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return $S;\n"`"west side").build()).build()).build();" is 301.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithMembersButNoConstructorCall,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "enum Roshambo {\n"+ " SPOCK {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"west side\";\n"+ " }\n"+ " }\n"+ "}\n");" is 289.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "TypeSpec roshambo=TypeSpec.enumBuilder("Roshambo").addModifiers(Modifier.PUBLIC).addEnumConstant("ROCK"`TypeSpec.anonymousClassBuilder("").addAnnotation(Deprecated.class).build()).addEnumConstant("PAPER").addEnumConstant("SCISSORS").build();" is 241.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumWithAnnotatedValues,Long Statement,The length of the statement "assertThat(toString(roshambo)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "public enum Roshambo {\n"+ " @Deprecated\n"+ " ROCK`\n"+ "\n"+ " PAPER`\n"+ "\n"+ " SCISSORS\n"+ "}\n");" is 231.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).addMethod(MethodSpec.methodBuilder("throwOne").addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("throwTwo").addException(IOException.class).addException(ClassName.get(tacosPackage`"SourCreamException")).build()).addMethod(MethodSpec.methodBuilder("abstractThrow").addModifiers(Modifier.ABSTRACT).addException(IOException.class).build()).addMethod(MethodSpec.methodBuilder("nativeThrow").addModifiers(Modifier.NATIVE).addException(IOException.class).build()).build();" is 569.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodThrows,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.IOException;\n"+ "\n"+ "abstract class Taco {\n"+ " void throwOne() throws IOException {\n"+ " }\n"+ "\n"+ " void throwTwo() throws IOException` SourCreamException {\n"+ " }\n"+ "\n"+ " abstract void abstractThrow() throws IOException;\n"+ "\n"+ " native void nativeThrow() throws IOException;\n"+ "}\n");" is 403.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(t).addTypeVariable(p).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`p)).addField(t`"label").addField(p`"x").addField(p`"y").addMethod(MethodSpec.methodBuilder("compareTo").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(p`"p").addCode("return 0;\n").build()).addMethod(MethodSpec.methodBuilder("of").addModifiers(Modifier.PUBLIC`Modifier.STATIC).addTypeVariable(t).addTypeVariable(p).returns(ParameterizedTypeName.get(location`t`p)).addParameter(t`"label").addParameter(p`"x").addParameter(p`"y").addCode("throw new $T($S);\n"`UnsupportedOperationException.class`"TODO").build()).build();" is 730.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariables,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "import java.lang.Override;\n"+ "import java.lang.UnsupportedOperationException;\n"+ "\n"+ "class Location<T` P extends Number> implements Comparable<P> {\n"+ " T label;\n"+ "\n"+ " P x;\n"+ "\n"+ " P y;\n"+ "\n"+ " @Override\n"+ " public int compareTo(P p) {\n"+ " return 0;\n"+ " }\n"+ "\n"+ " public static <T` P extends Number> Location<T` P> of(T label` P x` P y) {\n"+ " throw new UnsupportedOperationException(\"TODO\");\n"+ " }\n"+ "}\n");" is 597.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Location").addTypeVariable(p.withBounds(Comparable.class)).addTypeVariable(q.withBounds(Comparable.class)).addField(p`"x").addField(q`"y").build();" is 188.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,typeVariableWithBounds,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Comparable;\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<P extends Number & Comparable` @A Q extends Number & Comparable> {\n"+ " P x;\n"+ "\n"+ " @A Q y;\n"+ "}\n");" is 281.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Taco").addModifiers(Modifier.ABSTRACT).superclass(ParameterizedTypeName.get(ClassName.get(AbstractSet.class)`food)).addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 286.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "import java.util.AbstractSet;\n"+ "\n"+ "abstract class Taco extends AbstractSet<Food> "+ "implements Serializable` Comparable<Taco> {\n"+ "}\n");" is 301.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Outer").superclass(ParameterizedTypeName.get(callable`inner)).addType(TypeSpec.classBuilder("Inner").addModifiers(Modifier.STATIC).build()).build();" is 189.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classImplementsNestedClass,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.concurrent.Callable;\n"+ "\n"+ "class Outer extends Callable<Outer.Inner> {\n"+ " static class Inner {\n"+ " }\n"+ "}\n");" is 226.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.enumBuilder("Food").addSuperinterface(Serializable.class).addSuperinterface(Cloneable.class).addEnumConstant("LEAN_GROUND_BEEF").addEnumConstant("SHREDDED_CHEESE").build();" is 199.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,enumImplements,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Cloneable;\n"+ "\n"+ "enum Food implements Serializable` Cloneable {\n"+ " LEAN_GROUND_BEEF`\n"+ "\n"+ " SHREDDED_CHEESE\n"+ "}\n");" is 270.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.interfaceBuilder("Taco").addSuperinterface(Serializable.class).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Comparable.class)`taco)).build();" is 181.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceExtends,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.lang.Comparable;\n"+ "\n"+ "interface Taco extends Serializable` Comparable<Taco> {\n"+ "}\n");" is 228.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "TypeSpec typeSpec=TypeSpec.classBuilder("Combo").addField(taco`"taco").addField(chips`"chips").addType(TypeSpec.classBuilder(taco.simpleName()).addModifiers(Modifier.STATIC).addField(ParameterizedTypeName.get(ClassName.get(List.class)`topping)`"toppings").addField(sauce`"sauce").addType(TypeSpec.enumBuilder(topping.simpleName()).addEnumConstant("SHREDDED_CHEESE").addEnumConstant("LEAN_GROUND_BEEF").build()).build()).addType(TypeSpec.classBuilder(chips.simpleName()).addModifiers(Modifier.STATIC).addField(topping`"topping").addField(sauce`"dippingSauce").build()).addType(TypeSpec.enumBuilder(sauce.simpleName()).addEnumConstant("SOUR_CREAM").addEnumConstant("SALSA").addEnumConstant("QUESO").addEnumConstant("MILD").addEnumConstant("FIRE").build()).build();" is 762.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nestedClasses,Long Statement,The length of the statement "assertThat(toString(typeSpec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.List;\n"+ "\n"+ "class Combo {\n"+ " Taco taco;\n"+ "\n"+ " Chips chips;\n"+ "\n"+ " static class Taco {\n"+ " List<Topping> toppings;\n"+ "\n"+ " Sauce sauce;\n"+ "\n"+ " enum Topping {\n"+ " SHREDDED_CHEESE`\n"+ "\n"+ " LEAN_GROUND_BEEF\n"+ " }\n"+ " }\n"+ "\n"+ " static class Chips {\n"+ " Taco.Topping topping;\n"+ "\n"+ " Sauce dippingSauce;\n"+ " }\n"+ "\n"+ " enum Sauce {\n"+ " SOUR_CREAM`\n"+ "\n"+ " SALSA`\n"+ "\n"+ " QUESO`\n"+ "\n"+ " MILD`\n"+ "\n"+ " FIRE\n"+ " }\n"+ "}\n");" is 595.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "TypeSpec annotation=TypeSpec.annotationBuilder("MyAnnotation").addModifiers(Modifier.PUBLIC).addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("$L"`0).returns(int.class).build()).build();" is 241.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotation,Long Statement,The length of the statement "assertThat(toString(annotation)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "public @interface MyAnnotation {\n"+ " int test() default 0;\n"+ "}\n");" is 161.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.annotationBuilder("Bar").addMethod(MethodSpec.methodBuilder("value").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).defaultValue("@$T"`Deprecated.class).returns(Deprecated.class).build()).build();" is 219.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,innerAnnotationInAnnotationDeclaration,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "\n"+ "@interface Bar {\n"+ " Deprecated value() default @Deprecated;\n"+ "}\n");" is 196.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "FieldSpec field=FieldSpec.builder(int.class`"FOO").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$L"`101).build();" is 142.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Long Statement,The length of the statement "assertThat(toString(anno)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@interface Anno {\n"+ " int FOO = 101;\n"+ "}\n");" is 133.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationWithFields,Magic Number,The method contains a magic number: 101
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultValueForMethod,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC).defaultValue("0").returns(int.class).build()).build();" is 158.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,classCannotHaveDefaultMethods,Long Statement,The length of the statement "TypeSpec.classBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 219.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 235.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceStaticMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " static int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 161.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "TypeSpec bar=TypeSpec.interfaceBuilder("Tacos").addMethod(MethodSpec.methodBuilder("test").addModifiers(Modifier.PUBLIC`Modifier.DEFAULT).returns(int.class).addCode(CodeBlock.builder().addStatement("return 0").build()).build()).build();" is 236.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,interfaceDefaultMethods,Long Statement,The length of the statement "assertThat(toString(bar)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "interface Tacos {\n"+ " default int test() {\n"+ " return 0;\n"+ " }\n"+ "}\n");" is 162.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "FieldSpec internalBottom=FieldSpec.builder(ClassName.get(tacosPackage`"Top"`"Middle"`"Bottom")`"internalBottom").build();" is 121.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "TypeSpec top=TypeSpec.classBuilder("Top").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Middle").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).addType(TypeSpec.classBuilder("Bottom").addField(internalTop).addField(internalBottom).addField(externalTop).addField(externalBottom).build()).build()).build();" is 430.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,referencedAndDeclaredSimpleNamesConflict,Long Statement,The length of the statement "assertThat(toString(top)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.squareup.donuts.Bottom;\n"+ "\n"+ "class Top {\n"+ " Top internalTop;\n"+ "\n"+ " Middle.Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " Bottom externalBottom;\n"+ "\n"+ " class Middle {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ "\n"+ " class Bottom {\n"+ " Top internalTop;\n"+ "\n"+ " Bottom internalBottom;\n"+ "\n"+ " com.squareup.donuts.Top externalTop;\n"+ "\n"+ " com.squareup.donuts.Bottom externalBottom;\n"+ " }\n"+ " }\n"+ "}\n");" is 694.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNamesConflictInThisAndOtherPackage,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Gen {\n"+ " Other internalOther;\n"+ "\n"+ " com.squareup.donuts.Other externalOther;\n"+ "}\n");" is 185.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "TypeSpec gen=TypeSpec.classBuilder("Gen").addTypeVariable(TypeVariableName.get("InPackage")).addTypeVariable(TypeVariableName.get("OtherType")).addField(FieldSpec.builder(inPackage`"inPackage").build()).addField(FieldSpec.builder(otherType`"otherType").build()).addMethod(MethodSpec.methodBuilder("withTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("withoutTypeVariables").addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("againWithTypeVariables").addTypeVariable(TypeVariableName.get("MethodInPackage")).addTypeVariable(TypeVariableName.get("MethodOtherType")).addStatement("$T inPackage = null"`methodInPackage).addStatement("$T otherType = null"`methodOtherType).build()).addMethod(MethodSpec.methodBuilder("masksEnclosingTypeVariable").addTypeVariable(TypeVariableName.get("InPackage")).build()).addMethod(MethodSpec.methodBuilder("hasSimpleNameThatWasPreviouslyMasked").addStatement("$T inPackage = null"`inPackage).build()).build();" is 1268.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,simpleNameConflictsWithTypeVariable,Long Statement,The length of the statement "assertThat(toString(gen)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.other.MethodOtherType;\n"+ "\n"+ "class Gen<InPackage` OtherType> {\n"+ " com.squareup.tacos.InPackage inPackage;\n"+ "\n"+ " com.other.OtherType otherType;\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void withTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " void withoutTypeVariables() {\n"+ " MethodInPackage inPackage = null;\n"+ " MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <MethodInPackage` MethodOtherType> void againWithTypeVariables() {\n"+ " com.squareup.tacos.MethodInPackage inPackage = null;\n"+ " com.other.MethodOtherType otherType = null;\n"+ " }\n"+ "\n"+ " <InPackage> void masksEnclosingTypeVariable() {\n"+ " }\n"+ "\n"+ " void hasSimpleNameThatWasPreviouslyMasked() {\n"+ " com.squareup.tacos.InPackage inPackage = null;\n"+ " }\n"+ "}\n");" is 965.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,originatingElementsIncludesThoseOfNestedTypes,Long Statement,The length of the statement "TypeSpec outer=TypeSpec.classBuilder("Outer").addOriginatingElement(outerElement).addType(TypeSpec.classBuilder("Inner").addOriginatingElement(innerElement).build()).build();" is 174.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("getComparator").addTypeVariable(typeVariable).returns(typeVariable).addCode("return null;\n").build()).build();" is 191.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,intersectionType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.Comparator;\n"+ "\n"+ "class Taco {\n"+ " <T extends Comparator & Serializable> T getComparator() {\n"+ " return null;\n"+ " }\n"+ "}\n");" is 272.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,arrayType,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " int[] ints;\n"+ "}\n");" is 125.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addJavadoc("A hard or soft tortilla` loosely folded and filled with whatever {@link \n").addJavadoc("{@link $T random} tex-mex stuff we could find in the pantry\n"`Random.class).addJavadoc(CodeBlock.of("and some {@link $T} cheese.\n"`String.class)).addField(FieldSpec.builder(boolean.class`"soft").addJavadoc("True for a soft flour tortilla; false for a crunchy corn tortilla.\n").build()).addMethod(MethodSpec.methodBuilder("refold").addJavadoc("Folds the back of this taco to reduce sauce leakage.\n" + "\n" + "<p>For {@link $T#KOREAN}` the front may also be folded.\n"`Locale.class).addParameter(Locale.class`"locale").build()).build();" is 683.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadoc,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.util.Locale;\n"+ "\n"+ "/**\n"+ " * A hard or soft tortilla` loosely folded and filled with whatever {@link \n"+ " * {@link java.util.Random random} tex-mex stuff we could find in the pantry\n"+ " * and some {@link java.lang.String} cheese.\n"+ " */\n"+ "class Taco {\n"+ " /**\n"+ " * True for a soft flour tortilla; false for a crunchy corn tortilla.\n"+ " */\n"+ " boolean soft;\n"+ "\n"+ " /**\n"+ " * Folds the back of this taco to reduce sauce leakage.\n"+ " *\n"+ " * <p>For {@link Locale#KOREAN}` the front may also be folded.\n"+ " */\n"+ " void refold(Locale locale) {\n"+ " }\n"+ "}\n");" is 693.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "TypeSpec menu=TypeSpec.classBuilder("Menu").addAnnotation(AnnotationSpec.builder(mealDeal).addMember("price"`"$L"`500).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"taco").addMember("meat"`"$T.class"`beef).build()).addMember("options"`"$L"`AnnotationSpec.builder(option).addMember("name"`"$S"`"quesadilla").addMember("meat"`"$T.class"`chicken).build()).build()).build();" is 403.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Long Statement,The length of the statement "assertThat(toString(menu)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "@MealDeal(\n"+ " price = 500`\n"+ " options = {\n"+ " @Option(name = \"taco\"` meat = Beef.class)`\n"+ " @Option(name = \"quesadilla\"` meat = Chicken.class)\n"+ " }\n"+ ")\n"+ "class Menu {\n"+ "}\n");" is 285.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,annotationsInAnnotations,Magic Number,The method contains a magic number: 500
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "TypeSpec taqueria=TypeSpec.classBuilder("Taqueria").addMethod(MethodSpec.methodBuilder("prepare").addParameter(int.class`"workers").addParameter(Runnable[].class`"jobs").varargs().build()).build();" is 197.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,varargs,Long Statement,The length of the statement "assertThat(toString(taqueria)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Runnable;\n"+ "\n"+ "class Taqueria {\n"+ " void prepare(int workers` Runnable... jobs) {\n"+ " }\n"+ "}\n");" is 213.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock ifBlock=CodeBlock.builder().beginControlFlow("if (!a.equals(b))").addStatement("return i").endControlFlow().build();" is 126.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock methodBody=CodeBlock.builder().addStatement("$T size = $T.min(listA.size()` listB.size())"`int.class`Math.class).beginControlFlow("for ($T i = 0; i < size; i++)"`int.class).addStatement("$T $N = $N.get(i)"`String.class`"a"`"listA").addStatement("$T $N = $N.get(i)"`String.class`"b"`"listB").add("$L"`ifBlock).endControlFlow().addStatement("return size").build();" is 372.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "CodeBlock fieldBlock=CodeBlock.builder().add("$>$>").add("\n$T.<$T` $T>builder()$>$>"`ImmutableMap.class`String.class`String.class).add("\n.add($S` $S)"`'\''`"&#39;").add("\n.add($S` $S)"`'&'`"&amp;").add("\n.add($S` $S)"`'<'`"&lt;").add("\n.add($S` $S)"`'>'`"&gt;").add("\n.build()$<$<").add("$<$<").build();" is 309.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "FieldSpec escapeHtml=FieldSpec.builder(ParameterizedTypeName.get(Map.class`String.class`String.class)`"ESCAPE_HTML").addModifiers(Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).initializer(fieldBlock).build();" is 211.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "TypeSpec util=TypeSpec.classBuilder("Util").addField(escapeHtml).addMethod(MethodSpec.methodBuilder("commonPrefixLength").returns(int.class).addParameter(ParameterizedTypeName.get(List.class`String.class)`"listA").addParameter(ParameterizedTypeName.get(List.class`String.class)`"listB").addCode(methodBody).build()).build();" is 324.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,codeBlocks,Long Statement,The length of the statement "assertThat(toString(util)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import com.google.common.collect.ImmutableMap;\n"+ "import java.lang.Math;\n"+ "import java.lang.String;\n"+ "import java.util.List;\n"+ "import java.util.Map;\n"+ "\n"+ "class Util {\n"+ " private static final Map<String` String> ESCAPE_HTML = \n"+ " ImmutableMap.<String` String>builder()\n"+ " .add(\"\'\"` \"&#39;\")\n"+ " .add(\"&\"` \"&amp;\")\n"+ " .add(\"<\"` \"&lt;\")\n"+ " .add(\">\"` \"&gt;\")\n"+ " .build();\n"+ "\n"+ " int commonPrefixLength(List<String> listA` List<String> listB) {\n"+ " int size = Math.min(listA.size()` listB.size());\n"+ " for (int i = 0; i < size; i++) {\n"+ " String a = listA.get(i);\n"+ " String b = listB.get(i);\n"+ " if (!a.equals(b)) {\n"+ " return i;\n"+ " }\n"+ " }\n"+ " return size;\n"+ " }\n"+ "}\n");" is 834.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if ($1L != null || $1L == $2L)"`"taco"`"otherTaco").addStatement("$T.out.println($S)"`System.class`"only one taco? NOO!").nextControlFlow("else if ($1L.$3L && $2L.$3L)"`"taco"`"otherTaco"`"isSupreme()").addStatement("$T.out.println($S)"`System.class`"taco heaven").endControlFlow().build()).build();" is 407.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,indexedElseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (taco != null || taco == otherTaco) {\n"+ " System.out.println(\"only one taco? NOO!\");\n"+ " } else if (taco.isSupreme() && otherTaco.isSupreme()) {\n"+ " System.out.println(\"taco heaven\");\n"+ " }\n"+ " }\n"+ "}\n");" is 385.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("choices").beginControlFlow("if (5 < 4) ").addStatement("$T.out.println($S)"`System.class`"wat").nextControlFlow("else if (5 < 6)").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow().build()).build();" is 301.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,elseIf,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void choices() {\n"+ " if (5 < 4) {\n"+ " System.out.println(\"wat\");\n"+ " } else if (5 < 6) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 299.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("loopForever").beginControlFlow("do").addStatement("$T.out.println($S)"`System.class`"hello").endControlFlow("while (5 < 6)").build()).build();" is 222.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doWhile,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void loopForever() {\n"+ " do {\n"+ " System.out.println(\"hello\");\n"+ " } while (5 < 6);\n"+ " }\n"+ "}\n");" is 249.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("inlineIndent").addCode("if (3 < 4) {\n$>$T.out.println($S);\n$<}\n"`System.class`"hello").build()).build();" is 187.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,inlineIndent,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.System;\n"+ "\n"+ "class Taco {\n"+ " void inlineIndent() {\n"+ " if (3 < 4) {\n"+ " System.out.println(\"hello\");\n"+ " }\n"+ " }\n"+ "}\n");" is 243.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.interfaceBuilder("Taco").addField(FieldSpec.builder(String.class`"SHELL").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.FINAL).initializer("$S"`"crunchy corn").build()).addMethod(MethodSpec.methodBuilder("fold").addModifiers(Modifier.PUBLIC`Modifier.ABSTRACT).build()).addType(TypeSpec.classBuilder("Topping").addModifiers(Modifier.PUBLIC`Modifier.STATIC).build()).build();" is 404.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForInterfaceMembers,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "interface Taco {\n"+ " String SHELL = \"crunchy corn\";\n"+ "\n"+ " void fold();\n"+ "\n"+ " class Topping {\n"+ " }\n"+ "}\n");" is 247.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addType(TypeSpec.classBuilder("Meat").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.interfaceBuilder("Tortilla").addModifiers(Modifier.STATIC).build()).addType(TypeSpec.enumBuilder("Topping").addModifiers(Modifier.STATIC).addEnumConstant("SALSA").build()).build();" is 318.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,defaultModifiersForMemberInterfacesAndEnums,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " static class Meat {\n"+ " }\n"+ "\n"+ " interface Tortilla {\n"+ " }\n"+ "\n"+ " enum Topping {\n"+ " SALSA\n"+ " }\n"+ "}\n");" is 229.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Members").addType(TypeSpec.classBuilder("Z").build()).addType(TypeSpec.classBuilder("Y").build()).addField(String.class`"X"`Modifier.STATIC).addField(String.class`"W").addField(String.class`"V"`Modifier.STATIC).addField(String.class`"U").addMethod(MethodSpec.methodBuilder("T").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("S").build()).addMethod(MethodSpec.methodBuilder("R").addModifiers(Modifier.STATIC).build()).addMethod(MethodSpec.methodBuilder("Q").build()).addMethod(MethodSpec.constructorBuilder().addParameter(int.class`"p").build()).addMethod(MethodSpec.constructorBuilder().addParameter(long.class`"o").build()).build();" is 698.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,membersOrdering,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Members {\n"+ " static String X;\n"+ "\n"+ " static String V;\n"+ "\n"+ " String W;\n"+ "\n"+ " String U;\n"+ "\n"+ " Members(int p) {\n"+ " }\n"+ "\n"+ " Members(long o) {\n"+ " }\n"+ "\n"+ " static void T() {\n"+ " }\n"+ "\n"+ " void S() {\n"+ " }\n"+ "\n"+ " static void R() {\n"+ " }\n"+ "\n"+ " void Q() {\n"+ " }\n"+ "\n"+ " class Z {\n"+ " }\n"+ "\n"+ " class Y {\n"+ " }\n"+ "}\n");" is 515.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("nativeInt").addModifiers(Modifier.NATIVE).returns(int.class).build()).addMethod(MethodSpec.methodBuilder("alert").addModifiers(Modifier.PUBLIC`Modifier.STATIC`Modifier.NATIVE).addParameter(String.class`"msg").addCode(CodeBlock.builder().add(" /*-{\n").indent().addStatement("$$wnd.alert(msg)").unindent().add("}-*/").build()).build()).build();" is 423.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nativeMethods,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " native int nativeInt();\n"+ "\n"+ " public static native void alert(String msg) /*-{\n"+ " $wnd.alert(msg);\n"+ " }-*/;\n"+ "}\n");" is 269.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"NULL").initializer("$S"`(Object)null).build()).build();" is 140.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,nullStringLiteral,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String NULL = null;\n"+ "}\n");" is 169.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S"`"taco").build();" is 178.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,methodToString,Long Statement,The length of the statement "assertThat(method.toString()).isEqualTo("" + "@java.lang.Override\n" + "public java.lang.String toString() {\n"+ " return \"taco\";\n"+ "}\n");" is 143.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "MethodSpec constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC).addParameter(ClassName.get(tacosPackage`"Taco")`"taco").addStatement("this.$N = $N"`"taco"`"taco").build();" is 192.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,constructorToString,Long Statement,The length of the statement "assertThat(constructor.toString()).isEqualTo("" + "public Constructor(com.squareup.tacos.Taco taco) {\n" + " this.taco = taco;\n"+ "}\n");" is 138.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,parameterToString,Long Statement,The length of the statement "ParameterSpec parameter=ParameterSpec.builder(ClassName.get(tacosPackage`"Taco")`"taco").addModifiers(Modifier.FINAL).addAnnotation(ClassName.get("javax.annotation"`"Nullable")).build();" is 186.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "TypeSpec type=TypeSpec.anonymousClassBuilder("").addSuperinterface(Runnable.class).addMethod(MethodSpec.methodBuilder("run").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).build()).build();" is 202.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,anonymousClassToString,Long Statement,The length of the statement "assertThat(type.toString()).isEqualTo("" + "new java.lang.Runnable() {\n" + " @java.lang.Override\n"+ " public void run() {\n"+ " }\n"+ "}");" is 141.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addStatement("return $S\n+ $S\n+ $S\n+ $S\n+ $S"`"Taco("`"beef`"`"lettuce`"`"cheese"`")").build()).build();" is 280.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatement,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " @Override\n"+ " public String toString() {\n"+ " return \"Taco(\"\n"+ " + \"beef`\"\n"+ " + \"lettuce`\"\n"+ " + \"cheese\"\n"+ " + \")\";\n"+ " }\n"+ "}\n");" is 328.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec prefixComparator=TypeSpec.anonymousClassBuilder("").addSuperinterface(stringComparator).addMethod(MethodSpec.methodBuilder("compare").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(int.class).addParameter(String.class`"a").addParameter(String.class`"b").addStatement("return a.substring(0` length)\n" + ".compareTo(b.substring(0` length))").build()).build();" is 388.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("comparePrefix").returns(stringComparator).addParameter(int.class`"length"`Modifier.FINAL).addStatement("return $L"`prefixComparator).build()).addMethod(MethodSpec.methodBuilder("sortPrefix").addParameter(listOfString`"list").addParameter(int.class`"length"`Modifier.FINAL).addStatement("$T.sort(\nlist`\n$L)"`Collections.class`prefixComparator).build()).build();" is 442.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStatementWithAnonymousClass,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "import java.util.Collections;\n"+ "import java.util.Comparator;\n"+ "import java.util.List;\n"+ "\n"+ "class Taco {\n"+ " Comparator<String> comparePrefix(final int length) {\n"+ " return new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " };\n"+ " }\n"+ "\n"+ " void sortPrefix(List<String> list` final int length) {\n"+ " Collections.sort(\n"+ " list`\n"+ " new Comparator<String>() {\n"+ " @Override\n"+ " public int compare(String a` String b) {\n"+ " return a.substring(0` length)\n"+ " .compareTo(b.substring(0` length));\n"+ " }\n"+ " });\n"+ " }\n"+ "}\n");" is 840.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(FieldSpec.builder(String.class`"toppings").initializer("$S"`"shell\nbeef\nlettuce\ncheese\n").build()).build();" is 164.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multilineStrings,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " String toppings = \"shell\\n\"\n"+ " + \"beef\\n\"\n"+ " + \"lettuce\\n\"\n"+ " + \"cheese\\n\";\n"+ "}\n");" is 246.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,doubleFieldInitialization,Long Statement,The length of the statement "FieldSpec.builder(String.class`"listA").initializer(CodeBlock.builder().add("foo").build()).initializer(CodeBlock.builder().add("bar").build()).build();" is 152.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addAnnotations(Arrays.asList(AnnotationSpec.builder(SuppressWarnings.class).addMember("value"`"$S"`"unchecked").build()`AnnotationSpec.builder(Deprecated.class).build())).build();" is 223.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleAnnotationAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Deprecated;\n"+ "import java.lang.SuppressWarnings;\n"+ "\n"+ "@SuppressWarnings(\"unchecked\")\n"+ "@Deprecated\n"+ "class Taco {\n"+ "}\n");" is 242.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addFields(Arrays.asList(FieldSpec.builder(int.class`"ANSWER"`Modifier.STATIC`Modifier.FINAL).build()`FieldSpec.builder(BigDecimal.class`"price"`Modifier.PRIVATE).build())).build();" is 224.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleFieldAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.math.BigDecimal;\n"+ "\n"+ "class Taco {\n"+ " static final int ANSWER;\n"+ "\n"+ " private BigDecimal price;\n"+ "}\n");" is 216.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethods(Arrays.asList(MethodSpec.methodBuilder("getAnswer").addModifiers(Modifier.PUBLIC`Modifier.STATIC).returns(int.class).addStatement("return $L"`42).build()`MethodSpec.methodBuilder("getRandomQuantity").addModifiers(Modifier.PUBLIC).returns(int.class).addJavadoc("chosen by fair dice roll ;)").addStatement("return $L"`4).build())).build();" is 392.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " public static int getAnswer() {\n"+ " return 42;\n"+ " }\n"+ "\n"+ " /**\n"+ " * chosen by fair dice roll ;)\n"+ " */\n"+ " public int getRandomQuantity() {\n"+ " return 4;\n"+ " }\n"+ "}\n");" is 294.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 42
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleMethodAddition,Magic Number,The method contains a magic number: 4
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addSuperinterfaces(Arrays.asList(TypeName.get(Serializable.class)`TypeName.get(EventListener.class))).build();" is 154.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleSuperinterfaceAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.io.Serializable;\n"+ "import java.util.EventListener;\n"+ "\n"+ "class Taco implements Serializable` EventListener {\n"+ "}\n");" is 223.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "TypeSpec location=TypeSpec.classBuilder("Location").addTypeVariables(Arrays.asList(TypeVariableName.get("T")`TypeVariableName.get("P"`Number.class))).build();" is 158.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeVariableAddition,Long Statement,The length of the statement "assertThat(toString(location)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Number;\n"+ "\n"+ "class Location<T` P extends Number> {\n"+ "}\n");" is 172.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addTypes(Arrays.asList(TypeSpec.classBuilder("Topping").build()`TypeSpec.classBuilder("Sauce").build())).build();" is 157.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,multipleTypeAddition,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " class Topping {\n"+ " }\n"+ "\n"+ " class Sauce {\n"+ " }\n"+ "}\n");" is 171.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("addTopping").addParameter(ClassName.get("com.squareup.tacos"`"Topping")`"topping").beginControlFlow("try").addCode("/* do something tricky with the topping */\n").nextControlFlow("catch ($T e)"`ClassName.get("com.squareup.tacos"`"IllegalToppingException")).endControlFlow().build()).build();" is 371.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,tryCatch,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void addTopping(Topping topping) {\n"+ " try {\n"+ " /* do something tricky with the topping */\n"+ " } catch (IllegalToppingException e) {\n"+ " }\n"+ " }\n"+ "}\n");" is 269.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addMethod(MethodSpec.methodBuilder("isDelicious").addParameter(TypeName.INT`"count").returns(TypeName.BOOLEAN).beginControlFlow("if (count > 0)").addStatement("return true").nextControlFlow("else").addStatement("return false").endControlFlow().build()).build();" is 305.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,ifElse,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " boolean isDelicious(int count) {\n"+ " if (count > 0) {\n"+ " return true;\n"+ " } else {\n"+ " return false;\n"+ " }\n"+ " }\n"+ "}\n");" is 239.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,superClassOnlyValidForClasses,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,invalidSuperClass,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).build();" is 413.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,staticCodeBlock,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 377.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).build();" is 544.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockInRightPlace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 449.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec taco=TypeSpec.classBuilder("Taco").addField(String.class`"foo"`Modifier.PRIVATE).addField(String.class`"FOO"`Modifier.PRIVATE`Modifier.STATIC`Modifier.FINAL).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"FOO").build()).addMethod(MethodSpec.constructorBuilder().build()).addMethod(MethodSpec.methodBuilder("toString").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(String.class).addCode("return FOO;\n").build()).addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"FOO").build()).addOriginatingElement(originatingElement).alwaysQualify("com.example.AlwaysQualified").build();" is 631.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "TypeSpec initializersAdded=taco.toBuilder().addInitializerBlock(CodeBlock.builder().addStatement("foo = $S"`"instanceFoo").build()).addStaticBlock(CodeBlock.builder().addStatement("FOO = $S"`"staticFoo").build()).build();" is 221.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializersToBuilder,Long Statement,The length of the statement "assertThat(toString(initializersAdded)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.Override;\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " private static final String FOO;\n"+ "\n"+ " static {\n"+ " FOO = \"FOO\";\n"+ " }\n"+ " static {\n"+ " FOO = \"staticFoo\";\n"+ " }\n"+ "\n"+ " private String foo;\n"+ "\n"+ " {\n"+ " foo = \"FOO\";\n"+ " }\n"+ " {\n"+ " foo = \"instanceFoo\";\n"+ " }\n"+ "\n"+ " Taco() {\n"+ " }\n"+ "\n"+ " @Override\n"+ " public String toString() {\n"+ " return FOO;\n"+ " }\n"+ "}\n");" is 557.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnInterface,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,initializerBlockUnsupportedExceptionOnAnnotation,Empty catch clause,The method has an empty catch block.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "import java.lang.String;\n"+ "\n"+ "class Taco {\n"+ " void call(String s0` String s1` String s2` String s3` String s4` String s5` String s6` String s7`\n"+ " String s8` String s9` String s10` String s11` String s12` String s13` String s14` String s15`\n"+ " String s16` String s17` String s18` String s19` String s20` String s21` String s22`\n"+ " String s23` String s24` String s25` String s26` String s27` String s28` String s29`\n"+ " String s30` String s31) {\n"+ " call(\"0\"` \"1\"` \"2\"` \"3\"` \"4\"` \"5\"` \"6\"` \"7\"` \"8\"` \"9\"` \"10\"` \"11\"` \"12\"` \"13\"` \"14\"` \"15\"` \"16\"`\n"+ " \"17\"` \"18\"` \"19\"` \"20\"` \"21\"` \"22\"` \"23\"` \"24\"` \"25\"` \"26\"` \"27\"` \"28\"` \"29\"` \"30\"` \"31\");\n"+ " }\n"+ "}\n");" is 831.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrapping,Magic Number,The method contains a magic number: 32
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "MethodSpec method=MethodSpec.methodBuilder("call").addCode("$[iAmSickOfWaitingInLine($Z").addCode("it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` ").addCode("this` is` a` run` on` sentence").addCode(");$]\n").build();" is 244.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,lineWrappingWithZeroWidthSpace,Long Statement,The length of the statement "assertThat(toString(taco)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "class Taco {\n"+ " void call() {\n"+ " iAmSickOfWaitingInLine(\n"+ " it` has` been` far` too` long` of` a` wait` and` i` would` like` to` eat` this` is` a` run` on` sentence);\n"+ " }\n"+ "}\n");" is 278.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyAnnotations,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.classBuilder("Taco").addAnnotation(Override.class).addAnnotation(SuppressWarnings.class);" is 123.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,modifyEnumConstants,Long Statement,The length of the statement "TypeSpec.Builder builder=TypeSpec.enumBuilder("Taco").addEnumConstant("BELL"`constantType).addEnumConstant("WUT"`TypeSpec.anonymousClassBuilder("").build());" is 157.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocWithTrailingLineDoesNotAddAnother,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
ebb7d3ce593d9ae587e120f8a1e566555f9e074b,Thu Jun 18 21:21:06 CEST 2020,javapoet,com.squareup.javapoet,TypeSpecTest,javadocEnsuresTrailingLine,Long Statement,The length of the statement "assertThat(toString(spec)).isEqualTo("" + "package com.squareup.tacos;\n" + "\n"+ "/**\n"+ " * Some doc with a newline\n"+ " */\n"+ "class Taco {\n"+ "}\n");" is 157.
